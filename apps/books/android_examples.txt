## Andorid components
This tutorials is mainly design for providing templates for android devlopment and helping out my copy-paste efficiency. 

In this section, we wil mainly discussed abount the android compoents as shown in the table:
Table: Android Compoenent Summary
Activity                   # An example of sample android Action, We will also discuss actibity and application life cycle callback.
Android Service            # A simple of Android Service example and how to start, stop and communicate with android service.
Android Content Providers  # An example of Android Content Providers
Android Broadcast Receiver # An example of Android Broadcast Receiver
Fragemnt                   # An sample example of creating reusable compoents


# Android Simple Activity
Below I am providing a simple templates for having a easy Activity which just have a Click buttons Clicking of that button shows a Toast. extremely Simple.
Step1: Here is the Manifest.
{{{
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="in.co.dipankar.app">
    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>
</manifest>
}}}
Step 2: Here is the Layout
{{{
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent" >
    <Button
        android:id="@+id/MyButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_centerInParent="true"
        android:text="Button" />
</RelativeLayout>
}}}
Step 3: Here is the code:
{{{
import android.os.Bundle;
import android.app.Activity;
import android.content.Intent;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
public class MainActivity extends Activity {
	Button button;
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		button = (Button) findViewById(R.id.MyButton);
		button.setOnClickListener(new OnClickListener() {
			public void onClick(View arg0) {
        // DO Something.
			}
		});
	}
}
}}}

# Activity Life Cycle Callback
In this section , we will discuss all the override functions of Activity and theoir purpose.
- We have all the lifecyclic callback.
- How to support save and restore state
- How to handle intent when app is already running.
- How to ask Run time permission and how to handle that?
{{{
import android.os.Bundle;
import android.app.Activity;
import android.util.Log;

public class MainActivity extends Activity {
   String msg = "Android : ";

   /** Called when the activity is first created. */
   @Override
   public void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      setContentView(R.layout.activity_main);
      Log.d(msg, "The onCreate() event");
      // You might call this and call the code should be in onNewIntent
      // onNewIntent(getIntent());
   }

   /** Called when the activity is about to become visible. */
   @Override
   protected void onStart() {
      super.onStart();
      Log.d(msg, "The onStart() event");
   }

   /** Called when the activity has become visible. */
   @Override
   protected void onResume() {
      super.onResume();
      Log.d(msg, "The onResume() event");
   }

   /** Called when another activity is taking focus. */
   @Override
   protected void onPause() {
      super.onPause();
      Log.d(msg, "The onPause() event");
   }

   /** Called when the activity is no longer visible. */
   @Override
   protected void onStop() {
      super.onStop();
      Log.d(msg, "The onStop() event");
   }

   /** Called just before the activity is destroyed. */
   @Override
   public void onDestroy() {
      super.onDestroy();
      Log.d(msg, "The onDestroy() event");
   }

   // Save /STore State - https://inthecheesefactory.com/blog/fragment-state-saving-best-practices/en
   // These variable are destroyed along with Activity
   private int someVarA;
   private String someVarB;

   @Override
   protected void onSaveInstanceState(Bundle outState) {
       super.onSaveInstanceState(outState);
       outState.putInt("someVarA", someVarA);
       outState.putString("someVarB", someVarB);
       Log.d(msg, "The onSaveInstanceState() event");
   }

   @Override
   protected void onRestoreInstanceState(Bundle savedInstanceState) {
       super.onRestoreInstanceState(savedInstanceState);
       someVarA = savedInstanceState.getInt("someVarA");
       someVarB = savedInstanceState.getString("someVarB");
       Log.d(msg, "The onRestoreInstanceState() event");
   }

   // onNewIntent() is meant as entry point for singleTop activities which already run somewhere else in the stack and therefore can't call onCreate()
   @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        // getIntent() should always return the most recent
        setIntent(intent);
    }

    // Run time Permission
    private void askPermission(){
      if (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP_MR1) {
          if (!checkIfAlreadyhavePermission()) {
              requestForSpecificPermission();
          } else{
            proceedAfterPermission();
          }
      } else{
        proceedAfterPermission();
      }
    }

    private boolean checkIfAlreadyhavePermission() {
        int result = ContextCompat.checkSelfPermission(this, Manifest.permission.GET_ACCOUNTS);
        if (result == PackageManager.PERMISSION_GRANTED) {
            return true;
        } else {
            return false;
        }
    }

    private void requestForSpecificPermission() {
        ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.GET_ACCOUNTS, Manifest.permission.RECEIVE_SMS, Manifest.permission.READ_SMS, Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, 101);
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        switch (requestCode) {
            case 101:
                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    //granted
                } else {
                    //not granted
                }
                break;
            default:
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_PERMISSION_SETTING) {
            if (ActivityCompat.checkSelfPermission(MultiplePermissionsActivity.this, permissionsRequired[0]) == PackageManager.PERMISSION_GRANTED) {
                //Got Permission
                proceedAfterPermission();
            }
        }
    }

    private void proceedAfterPermission() {
        txtPermissions.setText("We've got all permissions");
        Toast.makeText(getBaseContext(), "We got All Permissions", Toast.LENGTH_LONG).show();
    }

    @Override
    protected void onPostResume() {
        super.onPostResume();
        if (sentToSettings) {
            if (ActivityCompat.checkSelfPermission(MultiplePermissionsActivity.this, permissionsRequired[0]) == PackageManager.PERMISSION_GRANTED) {
                //Got Permission
                proceedAfterPermission();
            }
        }
    }

}
}}}
You need to add permission String in the menifest.
{{{
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
}}}

# Android Services Templates
A Service is an Android application component without a UI that runs on the main thread (of the hosting process). It also has to be declared in the AndroidManifest.xml
1. A Started Service can be started by calling the startService(Intent)method in your Activity or Service. This Intent has to be an explicit Intent, which means that you either make a reference to the Service’s class
2.

A Service can be started multiple times and each time  onStartCommand() is called, we can pass extra while stated which is received by this callback. Even if you start a Service multiple times, it will only call onCreate() only once. To stop a service by calling stopSelf() from it. If you stop from outside, you must call as stopService.When the Service does stop then it will call onDestroy().

Service might be crashed or killed. In that case Service might be restarted base don the flag as it returned by onStartCommand.
1. Service.START_STICKY - Service is restarted if it gets terminated. Intent data passed to the onStartCommand method is null. Used for services which manages their own state and do not depend on the Intent data.
2. Service.START_NOT_STICKY - Service is not restarted. this is used for services which are periodically triggered anyway. The service is only restarted if the runtime has pending startService() calls since the service termination.
3. Service.START_REDELIVER_INTENT - Similar to Service.START_STICKY but the original Intent is re-delivered to the onStartCommand method.

We can have comminucation between service and Activity. The service receives the intent data from the starting Android component and performs its work. So the communication from Activity to service is statght forword. However, We need to use Receive for communicating service to activity. In this case your activity can register a broadcast receiver for an event and the service sends outs corresponding events. Android provides the LocalBroadcastManager class in the support library v4. This is a helper class to register for and send broadcasts of Intents to local objects within your process.



A sample service is giving as below:
1. First Create a Service Calss.
{{{
import android.app.Service;
import android.os.IBinder;
import android.content.Intent;
import android.os.Bundle;
import android.widget.Toast;
public class HelloService extends Service {
   /** indicates how to behave if the service is killed */
   int mStartMode;

   /** interface for clients that bind */
   IBinder mBinder;

   /** indicates whether onRebind should be used */
   boolean mAllowRebind;

   /** Called when the service is being created. */
   @Override
   public void onCreate() {

   }

   /** The service is starting, due to a call to startService() */
   @Override
   public int onStartCommand(Intent intent, int flags, int startId) {
      //process intent
      Toast.makeText(this, "Service Started", Toast.LENGTH_LONG).show();
      return START_STICKY;
   }

   /** A client is binding to the service with bindService() */
   @Override
   public IBinder onBind(Intent intent) {
      return mBinder;
   }

   /** Called when all clients have unbound with unbindService() */
   @Override
   public boolean onUnbind(Intent intent) {
      return mAllowRebind;
   }

   /** Called when a client is binding to the service with bindService()*/
   @Override
   public void onRebind(Intent intent) {
   }

   /** Called when The service is no longer used and is being destroyed */
   @Override
   public void onDestroy() {
   super.onDestroy();
   Toast.makeText(this, "Service Destroyed", Toast.LENGTH_LONG).show();
   }
}
}}}

Step 2: Activity can start or stop Service as below:
{{{
import android.content.Intent;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;

import android.os.Bundle;
import android.app.Activity;
import android.util.Log;
import android.view.View;

public class MainActivity extends Activity {
   String msg = "Android : ";

   /** Called when the activity is first created. */
   @Override
   public void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      setContentView(R.layout.activity_main);
      Log.d(msg, "The onCreate() event");
   }

   public void startService(View view) {
      startService(new Intent(getBaseContext(), MyService.class));
   }

   // Method to stop the service
   public void stopService(View view) {
      stopService(new Intent(getBaseContext(), MyService.class));
   }
}
}}}

Step 3: Dont forget to put thease into menufest.
{{{
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
   package="com.example.tutorialspoint7.myapplication">
   <application
      android:allowBackup="true"
      android:icon="@mipmap/ic_launcher"
      android:label="@string/app_name"
      android:supportsRtl="true"
      android:theme="@style/AppTheme">
      <activity android:name=".MainActivity">
         <intent-filter>
            <action android:name="android.intent.action.MAIN" />
            <category android:name="android.intent.category.LAUNCHER" />
         </intent-filter>
      </activity>
      <service android:name=".MyService" />
   </application>
</manifest>
}}}

We have another kind of service call intent servivce: The Service can be used in tasks with no UI, but shouldn't be too long. If you need to perform long tasks, you must use threads within Service. The IntentService can be used in long tasks usually with no communication to Main Thread. If communication is required, can use Main Thread handler or broadcast intents. Another case of use is when callbacks are needed.

Below example shows an Intent Service and a comminucation from service to Activity.
Step1: Let;s have the service here.
{{{
import android.app.IntentService;
import android.content.Intent;
public class CashbackIntentService extends IntentService{
    final static String CASHBACK_INFO = "cashback_info";
    public CashbackIntentService() {
        super("Cashback IntentService");
    }

    @Override
    protected void onHandleIntent(Intent intent) {
        String cb_category = intent.getStringExtra("cashback_cat");
        String cbinfo = getCashbackInfo(cb_category);
        sendCashbackInfoToClient(cbinfo);
    }
    private String getCashbackInfo(String cbcat){
        String cashback;
        if("electronics".equals(cbcat)){
            cashback = "Upto 20% cashback on electronics";
        }else if("fashion".equals(cbcat)){
            cashback = "Upto 60% cashbak on all fashion items";
        }else{
            cashback = "All other categories except fashion and electronics, flat 30% cashback";
        }
        return cashback;
    }
    // This runs on a worker thread.
    private void sendCashbackInfoToClient(String msg){
        Intent intent = new Intent();
        intent.setAction(CASHBACK_INFO);
        intent.putExtra("cashback",msg);
        sendBroadcast(intent);
        // LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
    }
}
}}}

Step2: Let;s have the activity and Have a Broadcast Receiver.
{{{
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;

public class IntentServiceActivity extends AppCompatActivity {
    private CashbackReciver cashbackReciver;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_intentservice);
        registerCashbackReceiver();
        startCashbackService();
    }
    @Override
    protected void onStop() {
        super.onStop();
        unregisterReceiver(cashbackReciver);
    }

    public void startCashbackService(View view){
        Intent cbIntent =  new Intent();
        cbIntent.setClass(this, CashbackIntentService.class);
        cbIntent.putExtra("cashback_cat", "SomeText");
        startService(cbIntent);
    }

    private void registerCashbackReceiver(){
        cashbackReciver = new CashbackReciver();
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(CashbackIntentService.CASHBACK_INFO);
        registerReceiver(cashbackReciver, intentFilter);
    }
    private class CashbackReciver extends BroadcastReceiver {
        @Override
        public void onReceive(Context context, Intent intent) {
            String cbinfo = intent.getStringExtra("cashback");
        }
    }
}
}}}

# Android Content Providers


# Android Broadcast Receiver

## Android UI Designs
In this section, I am mainly concentret on android UI Design. In andorid, we can build UI either using XML files or Programitically. We need Layouts and Controls to have a Layout. Layouts are the holders of the Controls and Controls are the actual Objects like button or TextView etc.
The summary of the section is as below:

Table: Summary of Andorid UI compoents
Layouts              # A way to align UI contraols
Controls             # The indivsial UI componenet 
Events and Guestures # Handlaing user inputs
Navigation           # A way to perform android Navigations
Dialog and Notification        # A way to show alert and Notification.


# Layouts
Table: List of All Layoit supported by Android
LinearLayout # Android LinearLayout is a view group that aligns all children in either vertically or horizontally. Some important properties is: android:baselineAligned, android:divider="000", android:gravity="center", android:orientation="vertical", android:weightSum=3
Relative Layout # RelativeLayout is a view group that displays child views in relative positions.
Table Layout # TableLayout is a view that groups views into rows and columns.
AbsoluteLayout # enables you to specify the exact location of its children.
Frame Layout # The FrameLayout is a placeholder on screen that you can use to display a single view.
List View # ListView is a view group that displays a list of scrollable items.
Grid View # GridView is a ViewGroup that displays items in a two-dimensional, scrollable grid.
Recyler View # Smart Views
CustomExtendViews # This is an extension on aelement View
CustomCopositeView # This loads and layout and Reperesnt a simpel view.
CustomDrawView    # Here we build a view by drawing in canvus

# Controls
Table: List of all controls/ Widgetsin Android
TextView # This control is used to display text to the user.
EditText # EditText is a predefined subclass of TextView that includes rich editing capabilities.
AutoCompleteTextView # The AutoCompleteTextView is a view that is similar to EditText, except that it shows a list of completion suggestions automatically while the user is typing.
Button # A push-button that can be pressed, or clicked, by the user to perform an action.
ImageButton # An ImageButton is an AbsoluteLayout which enables you to specify the exact location of its children. This shows a button with an image (instead of text) that can be pressed or clicked by the user.
CheckBox # An on/off switch that can be toggled by the user. You should use check box when presenting users with a group of selectable options that are not mutually exclusive.
ToggleButton # An on/off button with a light indicator.
RadioButton # The RadioButton has two states: either checked or unchecked.
RadioGroup # A RadioGroup is used to group together one or more RadioButtons.
ProgressBar # The ProgressBar view provides visual feedback about some ongoing tasks, such as when you are performing a task in the background.
Spinner # A drop-down list that allows users to select one value from a set.
TimePicker # The TimePicker view enables users to select a time of the day, in either 24-hour mode or AM/PM mode.
DatePicker # The DatePicker view enables users to select a date of the day.

# Navigations
Table: List of Navigation Patterns in Andrroid
ViewPager #
Navigation #
Menu #



# Dialog and Navigation
Table: Dialog and Notifications
AlertDiloags # A Dialog is small window that prompts the user to a decision or enter additional information. You might show some info and Ok button or Ask some confirmation ( OK/Cancel) or Misght show a list or might ask for selecet item from a list.
DialogFragment # Dialog hosted inside a fragemnet
ProgressDialog # Progress bars are used to show progress of a task
DatePickerDialog # Used for showing the date Picker dialog and selecet dates.
Notification # A notification is a message you can display to the user outside of your application's normal UI.

# Events and Guestures 
Table: List of all Evenet Guesture
onClick # Handling click events
onLongClick # Hanldong the log tap events
addTextChangedListener # Called when you chnages the text in EditText
onFocusChange # This is called when the widget looses its focus ie. user goes away from the view item.
onKey # This is called when the user is focused on the item and presses or releases a hardware key on the device.
onTouch # This is called when the user presses the key, releases the key, or any movement gesture on the screen.
onMenuItemClick # This is called when the user selects a menu item. You will use onMenuItemClick() event handler to handle such event.
onCreateContextMenu # This is called when the context menu is being built(as the result of a sustained "long click)
GestureDetector.SimpleOnGestureListener # Detect Android provides special types of touch screen events such as pinch , double tap, scrolls , long presses and flinch. These are all known as gestures.
ScaleGestureDetector # Delect the scale events.

# Android All Layout Discussion
This section, We will give some sample templte codes for all mostly used layouts:
1. Android LinearLayout is a view group that aligns all children in either vertically or horizontally. Some of mostly used attributes are :android:orientation = horizontal| vertical, android:gravity = top, bottom, left, right, center, center_vertical, center_horizontal ( how the elment inside are placed), android:layout_gravity( how itself is placed over parenet),  android:baselineAligned = true | false ( aligning all its children's baselines.), android:weightSum and android:weight.
A sample tempalte is as below:
{{{
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
   android:layout_width="fill_parent"
   android:layout_height="fill_parent"
   android:orientation="vertical" >
   <Button android:id="@+id/btnStartService"
      android:layout_width="270dp"
      android:layout_height="wrap_content"
      android:text="start_service"/>
   <Button android:id="@+id/btnPauseService"
      android:layout_width="270dp"
      android:layout_height="wrap_content"
      android:text="pause_service"/>
   <Button android:id="@+id/btnStopService"
      android:layout_width="270dp"
      android:layout_height="wrap_content"
      android:text="stop_service"/>
</LinearLayout>
}}}

2. RelativeLayout: Android RelativeLayout enables you to specify how child views are positioned relative to each other. Some Most common used attribute is: Center spacific: android:layout_centerHorizontal, android:layout_centerInParent, android:layout_centerVertical, (w.r.t parent:) android:layout_alignParentTop,android:layout_alignParentBottom, android:layout_alignParentStart, android:layout_alignParentLeft, android:layout_alignParentRight,android:layout_alignParentStart, android:layout_alignParentEnd,( with resperct to other): android:layout_alignLeft, android:layout_above, android:layout_below, android:layout_toLeftOf, android:layout_toRightOf, android:layout_toStartOf, android:layout_toEndOf. 
If you dont assign anything- it will just placed at top left corner. A sample example is as below:
{{{
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout 
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#ef9b00"
    android:orientation="vertical">
    <EditText
        android:id="@+id/name"
        android:layout_width="200dp"
        android:layout_height="wrap_content"
        android:background="#f8eff8f3"
        android:hint="Name"
        android:padding="16dp" />
    <EditText
        android:id="@+id/email"
        android:layout_width="180dp"
        android:layout_height="wrap_content"
        android:layout_marginLeft="5dp"
        android:layout_toRightOf="@+id/name"
        android:background="#f8eff8f3"
        android:hint="Address"
        android:padding="16dp" />
    <EditText
        android:id="@+id/subject"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@+id/name"
        android:layout_marginTop="16dp"
        android:background="#f8eff8f3"
        android:hint="Subject"
        android:padding="16dp" />
    <EditText
        android:id="@+id/message"
        android:layout_width="match_parent"
        android:layout_height="200dp"
        android:layout_below="@+id/subject"
        android:layout_marginTop="16dp"
        android:background="#f8eff8f3"
        android:gravity="top"
        android:hint="Message"
        android:padding="16dp" />
    <Button
        android:id="@+id/submit"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/message"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="16dp"
        android:padding="16dp"
        android:text="Submit" />
</RelativeLayout>
}}}

3. Android Constraint Layout: ConstraintLayout allows you to create large and complex layouts with a flat view hierarchy (no nested view groups). It's similar to RelativeLayout but have more flexiable and some advance feature.This design is closely related to iOS’s Constraint Layout. Constraint Layout provide better support for Drag and Drop views.
The Common constratins is defines as : layout_constraintTop_toTopOf , layout_constraintTop_toBottomOf ,layout_constraintBottom_toTopOf , layout_constraintBottom_toBottomOf etc. Mainly all 16 combination likes:
layout_constraint[X]_to[Y]Of: where X and Y =>[Left, right, Top, Buttom, Start, End ]: that is total 6*6 = 36 combination.  layout_constraintRight_toTopOf means Align this layout so that the right of this view to the top of another view.
- It is also possible to make it center alignment using defining top and button constratins 
- app:layout_constraintBaseline_toBaselineOf="@+id/text_title" used for base line.
- app:layout_constraintVertical_bias="0.5" or app:layout_constraintHorizontal_bias="0.5" Provides the Veritical Bias in %.
- 


A quick example is as below :
{{{
// Add this deps.
dependencies {
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha3'
}
}}}



# [EndToEnd] Recyler View

Step 0: Adding the dependecy in the graddle
{{{e
implementation 'com.android.support:recyclerview-v7:26.1.0'
}}}

Step 1: Define your DataItems
{{{e
public class Movie {
    private String title, genre, year;
    public Movie(String title, String genre, String year) {
        this.title = title;
        this.genre = genre;
        this.year = year;
    }
    ...
}
}}}
Step 2: Adding Recyler view in your layout.
{{{e
<android.support.v7.widget.RecyclerView
        android:id="@+id/recycler_view"
        android:scrollbars="vertical"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>
}}}

Step 3: Define Item Layout.
{{{e
 movie_list_row.xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content">
    <TextView
        android:id="@+id/title"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>
    <TextView
        android:id="@+id/genre"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@id/title" />
    <TextView
        android:id="@+id/year"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentRight="true"
        android:textColor="@color/year" />
</RelativeLayout>
}}}

Step 4: Define Adapter and View Holder.
{{{e
public class MoviesAdapter extends RecyclerView.Adapter<MoviesAdapter.MyViewHolder> {
    private List<Movie> moviesList;

    public class MyViewHolder extends RecyclerView.ViewHolder {
        public TextView title, year, genre;
        public MyViewHolder(View view) {
            super(view);
            title = (TextView) view.findViewById(R.id.title);
            genre = (TextView) view.findViewById(R.id.genre);
            year = (TextView) view.findViewById(R.id.year);
        }
    }

    public MoviesAdapter(List<Movie> moviesList) {
        this.moviesList = moviesList;
    }

    @Override
    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View itemView = LayoutInflater.from(parent.getContext()).inflate(R.layout.movie_list_row, parent, false);
        return new MyViewHolder(itemView);
    }
    @Override
    public void onBindViewHolder(MyViewHolder holder, int position) {
        Movie movie = moviesList.get(position);
        holder.title.setText(movie.getTitle());
        holder.genre.setText(movie.getGenre());
        holder.year.setText(movie.getYear());
    }
    @Override
    public int getItemCount() {
        return moviesList.size();
    }
}
}}}

Step 5: Integrating Adapter and View Together:
{{{e
// config view
recyclerView = (RecyclerView) findViewById(R.id.recycler_view);
RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getApplicationContext());
recyclerView.setLayoutManager(mLayoutManager);
recyclerView.setItemAnimator(new DefaultItemAnimator());
//have adaper
mAdapter = new MoviesAdapter(movieList);
// bind togethr
recyclerView.setAdapter(mAdapter);
}}}

Step 5A: Adding RecyclerView Divider / Separator
{{{e
recyclerView.addItemDecoration(new DividerItemDecoration(this, LinearLayoutManager.VERTICAL));
}}}

Step 5B: Custom RecyclerView Divider / Separator
{{{e
public class MyDividerItemDecoration extends RecyclerView.ItemDecoration {
    ...
}
recyclerView.addItemDecoration(new MyDividerItemDecoration(this, LinearLayoutManager.VERTICAL, 16));
}}}
Step 6: Add / Remove / ReplaceAll item Dynamatically.


Step 7: Having Hoz/ Vertical/Grid and Stack View using Layout manager.
{{{e
//Horizantal
RecyclerView.LayoutManager mLayoutManager = 
new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);
recyclerView.setLayoutManager(mLayoutManager);

//Vertocical
RecyclerView.LayoutManager mLayoutManager = 
new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.VERTICAL, false);
}}}

Step 8: Adding item click listeren
{{{e 
public class RecyclerTouchListener implements RecyclerView.OnItemTouchListener {
    private GestureDetector gestureDetector;
    private ClickListener clickListener;
    public RecyclerTouchListener(Context context, final RecyclerView recyclerView, final ClickListener clickListener) {
        this.clickListener = clickListener;
        gestureDetector = new GestureDetector(context, new GestureDetector.SimpleOnGestureListener() {
            @Override
            public boolean onSingleTapUp(MotionEvent e) {
                return true;
            }
            @Override
            public void onLongPress(MotionEvent e) {
                View child = recyclerView.findChildViewUnder(e.getX(), e.getY());
                if (child != null && clickListener != null) {
                    clickListener.onLongClick(child, recyclerView.getChildPosition(child));
                }
            }
        });
    }
 
    @Override
    public boolean onInterceptTouchEvent(RecyclerView rv, MotionEvent e) {
        View child = rv.findChildViewUnder(e.getX(), e.getY());
        if (child != null && clickListener != null && gestureDetector.onTouchEvent(e)) {
            clickListener.onClick(child, rv.getChildPosition(child));
        }
        return false;
    }
 
    @Override
    public void onTouchEvent(RecyclerView rv, MotionEvent e) {}
 
    @Override
    public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {}
 
    public interface ClickListener {
        void onClick(View view, int position);
        void onLongClick(View view, int position);
    }
}
recyclerView.addOnItemTouchListener(new RecyclerTouchListener(getApplicationContext(), recyclerView, new RecyclerTouchListener.ClickListener() {
    @Override
    public void onClick(View view, int position) {
        Movie movie = movieList.get(position);
    }
    @Override
    public void onLongClick(View view, int position) {
    }
}));
}}}

Step 9: Adding button listner inside the views.
{{{e
    @Override
    public void onBindViewHolder(final MyViewHolder holder, int position) {
        Album album = albumList.get(position);
        holder.title.setText(album.getName());
        ...
 
        holder.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // Click in holder,
            }
        });
        holder.button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // Click in some buttons,
            }
        });
    }
}}}

Step 10: Adding animation while adding item in the RV: In this tutorial we’ll learn an easy way to add an initial content animation for a RecyclerView. There are some ways of doing this, e.g.:
1. Implementing a custom ItemAnimator
2. Add animation handling to onBindViewHolder() in the Adapter
3. and third option, LayoutAnimation : which Defining an animation for each item and then Defining a LayoutAnimation using the item animation and Applying the LayoutAnimation programmatically and in XML

Ref: https://proandroiddev.com/enter-animation-using-recyclerview-and-layoutanimation-part-1-list-75a874a5d213
{{{e
// Step1: define item_animation_fall_down.xml in res/anim/ which mainly do 3 thinks in parrral.
<set xmlns:android="http://schemas.android.com/apk/res/android"
     android:duration="@integer/anim_duration_medium">
    <translate
        android:fromYDelta="-20%"
        android:toYDelta="0"
        android:interpolator="@android:anim/decelerate_interpolator"
        />
    <alpha
        android:fromAlpha="0"
        android:toAlpha="1"
        android:interpolator="@android:anim/decelerate_interpolator"
        />
    <scale
        android:fromXScale="105%"
        android:fromYScale="105%"
        android:toXScale="100%"
        android:toYScale="100%"
        android:pivotX="50%"
        android:pivotY="50%"
        android:interpolator="@android:anim/decelerate_interpolator"
        />
</set>
// Step2: Defining the LayoutAnimation: With the item animation done it’s time to define 
// the layout animation which will apply the item animation to each child in the layout. 
// Create a new file called layout_animation_fall_down.xml in res/anim/
<?xml version="1.0" encoding="utf-8"?>
<layoutAnimation
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:animation="@anim/item_animation_fall_down"
    android:delay="15%"
    android:animationOrder="normal"
    />
// Step 3: Applying the LayoutAnimation - A LayoutAnimation can be applied both programmatically and in XML.
<android.support.v7.widget.RecyclerView
    android:layout_width="match_parent"
    android:layout_height="match_parent"                                        
    android:layoutAnimation="@anim/layout_animation_fall_down"
    />
OR:
LayoutAnimationController animation = AnimationUtils.loadLayoutAnimation(ctx, R.anim.layout_animation_fall_down);
recyclerview.setLayoutAnimation(animation);

// Step 4: If you are changing data set or just want to re-run the animation you can do it like this:
private void runLayoutAnimation(final RecyclerView recyclerView) {
    final Context context = recyclerView.getContext();
    final LayoutAnimationController controller =
            AnimationUtils.loadLayoutAnimation(context, R.anim.layout_animation_fall_down);

    recyclerView.setLayoutAnimation(controller);
    recyclerView.getAdapter().notifyDataSetChanged();
    recyclerView.scheduleLayoutAnimation();
}
// Left to right 
<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android"
     android:duration="@integer/anim_duration_long">
    <translate
        android:interpolator="@android:anim/decelerate_interpolator"
        android:fromXDelta="100%p"
        android:toXDelta="0"
        />
    <alpha
        android:fromAlpha="0.5"
        android:toAlpha="1"
        android:interpolator="@android:anim/accelerate_decelerate_interpolator"
        />
</set>
// Slide from Button
<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android"
     android:duration="@integer/anim_duration_long">
    <translate
        android:interpolator="@android:anim/accelerate_decelerate_interpolator"
        android:fromYDelta="50%p"
        android:toYDelta="0"
        />
    <alpha
        android:fromAlpha="0"
        android:toAlpha="1"
        android:interpolator="@android:anim/accelerate_decelerate_interpolator"
        />
</set>
Grid Animation See here : https://proandroiddev.com/enter-animation-using-recyclerview-and-layoutanimation-part-2-grids-688829b1d29b
}}}

Step 11: Adding filters on RecyclerView :
{{{e
public class ContactsAdapter extends RecyclerView.Adapter<ContactsAdapter.MyViewHolder>
        implements Filterable {
    ....
    @Override
    public Filter getFilter() {
        return new Filter() {
            @Override
            protected FilterResults performFiltering(CharSequence charSequence) {
                String charString = charSequence.toString();
                if (charString.isEmpty()) {
                    contactListFiltered = contactList;
                } else {
                    List<Contact> filteredList = new ArrayList<>();
                    for (Contact row : contactList) {
                        if (row.getName().toLowerCase().contains(charString.toLowerCase()) || row.getPhone().contains(charSequence)) {
                            filteredList.add(row);
                        }
                    }
                    contactListFiltered = filteredList;
                }
                FilterResults filterResults = new FilterResults();
                filterResults.values = contactListFiltered;
                return filterResults;
            }
            @Override
            protected void publishResults(CharSequence charSequence, FilterResults filterResults) {
                contactListFiltered = (ArrayList<Contact>) filterResults.values;
                notifyDataSetChanged();
            }
        };
    }
}

// listening to search query text change
searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
    @Override
    public boolean onQueryTextSubmit(String query) {
        // filter recycler view when query submitted
        mAdapter.getFilter().filter(query);
        return false;
    }

    @Override
    public boolean onQueryTextChange(String query) {
        // filter recycler view when text is changed
        mAdapter.getFilter().filter(query);
        return false;
    }
});
}}}

Step 12: Supporting Sweep left or right Guesture.
{{{e
https://www.androidhive.info/2017/09/android-recyclerview-swipe-delete-undo-using-itemtouchhelper/
}}}

Step 13: Suppoting multi selecet like Gamil
{{{e
// https://www.androidhive.info/2017/02/android-creating-gmail-like-inbox-using-recyclerview/

}}}

Step 14: RV with GridLayout with CardView : GridLayoutManager is used to display the RecyclerView in Grid manner instead of list, GridSpacingItemDecoration is used to give equal margins around RecyclerView grid.
{{{e
// define deps
compile 'com.android.support:cardview-v7:23.3.+'

// define item layout.
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:card_view="http://schemas.android.com/apk/res-auto">
    <android.support.v7.widget.CardView
        xmlns:card_view="http://schemas.android.com/apk/res-auto"
        android:id="@+id/card_view"
        android:layout_gravity="center"
        android:layout_width="250dp"
        android:layout_height="250dp"
        card_view:cardCornerRadius="4dp">
        <TextView
            android:text="Hello Card"
            android:layout_width="match_parent"
            android:layout_height="match_parent" />
    </android.support.v7.widget.CardView>
</LinearLayout>

// Define Decorator.
public class GridSpacingItemDecoration extends RecyclerView.ItemDecoration {
        private int spanCount;
        private int spacing;
        private boolean includeEdge;
        public GridSpacingItemDecoration(int spanCount, int spacing, boolean includeEdge) {
            this.spanCount = spanCount;
            this.spacing = spacing;
            this.includeEdge = includeEdge;
        }
        @Override
        public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {
            int position = parent.getChildAdapterPosition(view); // item position
            int column = position % spanCount; // item column
            if (includeEdge) {
                outRect.left = spacing - column * spacing / spanCount; // spacing - column * ((1f / spanCount) * spacing)
                outRect.right = (column + 1) * spacing / spanCount; // (column + 1) * ((1f / spanCount) * spacing)
 
                if (position < spanCount) { // top edge
                    outRect.top = spacing;
                }
                outRect.bottom = spacing; // item bottom
            } else {
                outRect.left = column * spacing / spanCount; // column * ((1f / spanCount) * spacing)
                outRect.right = spacing - (column + 1) * spacing / spanCount; // spacing - (column + 1) * ((1f /    spanCount) * spacing)
                if (position >= spanCount) {
                    outRect.top = spacing; // item top
                }
            }
        }
    }
    /**
     * Converting dp to pixel
     */
    private int dpToPx(int dp) {
        Resources r = getResources();
        return Math.round(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, r.getDisplayMetrics()));
    }
}
// Activity:
RecyclerView.LayoutManager mLayoutManager = new GridLayoutManager(this, 2);
recyclerView.setLayoutManager(mLayoutManager);
recyclerView.addItemDecoration(new GridSpacingItemDecoration(2, dpToPx(10), true));
recyclerView.setItemAnimator(new DefaultItemAnimator());
recyclerView.setAdapter(adapter);
}}}

Step 15: RV With mutiple View Type: is it possible to create RecyclerView with multiple view types? Yes, it's possible. Just implement getItemViewType(), and take care of the viewType parameter in onCreateViewHolder().
{{{e
public class MyAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
    class ViewHolder0 extends RecyclerView.ViewHolder {
        ...
        public ViewHolder0(View itemView){
        ...
        }
    }

    class ViewHolder2 extends RecyclerView.ViewHolder {
        ...
        public ViewHolder2(View itemView){
        ...
    }

    @Override
    public int getItemViewType(int position) {
        // Just as an example, return 0 or 2 depending on position
        // Note that unlike in ListView adapters, types don't have to be contiguous
        return position % 2 * 2;
    }

    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
         switch (viewType) {
             case 0: return new ViewHolder0(...);
             case 2: return new ViewHolder2(...);
             ...
         }
    }

    @Override
    public void onBindViewHolder(final RecyclerView.ViewHolder holder, final int position) {
        switch (holder.getItemViewType()) {
            case 0:
                ViewHolder0 viewHolder0 = (ViewHolder0)holder;
                ...
                break;

            case 2:
                ViewHolder2 viewHolder2 = (ViewHolder2)holder;
                ...
                break;
        }
    }
}
}}}

Step 16: efficent updates on rv:
{{{e
// Insert single item: Add "Pig" at index 2.
String item = "Pig";
int insertIndex = 2;
data.add(insertIndex, item);
adapter.notifyItemInserted(insertIndex);

// Insert multiple items: Insert three more animals at index 2.
ArrayList<String> items = new ArrayList<>();
items.add("Pig");
items.add("Chicken");
items.add("Dog");
int insertIndex = 2;
data.addAll(insertIndex, items);
adapter.notifyItemRangeInserted(insertIndex, items.size());

//Remove single item: Remove "Pig" from the list.
int removeIndex = 2;
data.remove(removeIndex);
adapter.notifyItemRemoved(removeIndex);

// Remove multiple items: Remove "Camel" and "Sheep" from the list.
int startIndex = 2; // inclusive
int endIndex = 4;   // exclusive
int count = endIndex - startIndex; // 2 items will be removed
data.subList(startIndex, endIndex).clear();
adapter.notifyItemRangeRemoved(startIndex, count);

// Remove all items: Clear the whole list.
data.clear();
adapter.notifyDataSetChanged();

// Replace old list with new list: Clear the old list then add a new one.
data.clear();
ArrayList<String> newList = new ArrayList<>();
newList.add("Lion");
newList.add("Wolf");
newList.add("Bear");
data.addAll(newList);
adapter.notifyDataSetChanged();

// Update single item: Change the "Sheep" item so that it says "I like sheep."
String newValue = "I like sheep.";
int updateIndex = 3;
data.set(updateIndex, newValue);
adapter.notifyItemChanged(updateIndex);

// Move single item: Move "Sheep" from position 3 to position 1.
int fromPosition = 3;
int toPosition = 1;
// update data array
String item = data.get(fromPosition);
data.remove(fromPosition);
data.add(toPosition, item);
adapter.notifyItemMoved(fromPosition, toPosition);
}}}

Step 17: Adding Custom animation to RV items when loads: In this case We use ObjectAnimator and animation set to perform some animation. 
{{{
public class AnimationUtil {
    public static void animate(RecyclerView.ViewHolder holder ,boolean goesDown){
        AnimatorSet animatorSet = new AnimatorSet();
        ObjectAnimator animatorTranslateY = ObjectAnimator.ofFloat(holder.itemView, "translationY", goesDown==true ? 200 : -200, 0);
        animatorTranslateY.setDuration(1000);
        ObjectAnimator animatorTranslateX = ObjectAnimator.ofFloat(holder.itemView,"translationX",-50,50,-30,30,-20,20,-5,5,0);
        animatorTranslateX.setDuration(1000);
        animatorSet.playTogether(animatorTranslateX,animatorTranslateY);
        //animatorSet.playTogether(animatorTranslateY);
        animatorSet.start();
    }
}
public class MyCustomAdapter extends RecyclerView.Adapter<MyCustomAdapter.MyViewHolder> {
    ....
    @Override
    public void onBindViewHolder(MyViewHolder myViewHolder, final int position) {
        myViewHolder.textview.setText(data.get(position).title);
        myViewHolder.imageView.setImageResource(data.get(position).imageId);
        if(position > previousPosition){ // We are scrolling DOWN
            AnimationUtil.animate(myViewHolder, true);
        }else{ // We are scrolling UP
            AnimationUtil.animate(myViewHolder, false);
        }
        previousPosition = position;

        final int currentPosition = position;
        final Information infoData = data.get(position);
        myViewHolder.imageView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Toast.makeText(context, "OnClick Called at position " + position, Toast.LENGTH_SHORT).show();
                addItem(currentPosition, infoData);
            }
        });
        myViewHolder.imageView.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View v) {
                Toast.makeText(context, "OnLongClick Called at position " + position, Toast.LENGTH_SHORT).show();
                removeItem(infoData);
                return true;
            }
        });
    }
}}}
# Android Notification End-to-End

Steo1: Define Notifcation Layouts:

{{{e
// Notificationlayout.xml
<?xml version="1.0" encoding="UTF-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="fill_parent"
android:layout_height="fill_parent" >

<TextView
    android:id="@+id/msglbl"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="test" />

<TextView
    android:id="@+id/message"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_toRightOf="@+id/msglbl" />

<Button
    android:id="@+id/btn1"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="play" android:layout_margin="10dp"/>

</RelativeLayout>
}}}
Step 2: Define Your Notification calls.
{{{e
public class MyNotification extends Notification {

private Context ctx;
private NotificationManager mNotificationManager;

public MyNotification(Context ctx){
    super();
    this.ctx=ctx;
    String ns = Context.NOTIFICATION_SERVICE;
    mNotificationManager = (NotificationManager) ctx.getSystemService(ns);
    CharSequence tickerText = "Shortcuts";
    long when = System.currentTimeMillis();
    Notification.Builder builder = new Notification.Builder(ctx);

    Notification notification=builder.getNotification();
    notification.when=when;
    notification.tickerText=tickerText;
    notification.icon=R.drawable.ic_launcher;

    RemoteViews contentView=new RemoteViews(ctx.getPackageName(), R.layout.messageview);

    //set the button listeners
    setListeners(contentView);

    notification.contentView = contentView;
    notification.flags |= Notification.FLAG_ONGOING_EVENT;
    CharSequence contentTitle = "From Shortcuts";
    mNotificationManager.notify(548853, notification);
}

public void setListeners(RemoteViews view){
    //radio listener
    Intent radio=new Intent(ctx,HelperActivity.class);
    radio.putExtra("DO", "radio");
    PendingIntent pRadio = PendingIntent.getActivity(ctx, 0, radio, 0);
    view.setOnClickPendingIntent(R.id.radio, pRadio);

    //volume listener
    Intent volume=new Intent(ctx, HelperActivity.class);
    volume.putExtra("DO", "volume");
    PendingIntent pVolume = PendingIntent.getActivity(ctx, 1, volume, 0);
    view.setOnClickPendingIntent(R.id.volume, pVolume);

    //reboot listener
    Intent reboot=new Intent(ctx, HelperActivity.class);
    reboot.putExtra("DO", "reboot");
    PendingIntent pReboot = PendingIntent.getActivity(ctx, 5, reboot, 0);
    view.setOnClickPendingIntent(R.id.reboot, pReboot);

    //top listener
    Intent top=new Intent(ctx, HelperActivity.class);
    top.putExtra("DO", "top");
    PendingIntent pTop = PendingIntent.getActivity(ctx, 3, top, 0);
    view.setOnClickPendingIntent(R.id.top, pTop);*/

    //app listener
    Intent app=new Intent(ctx, com.example.demo.HelperActivity.class);
    app.putExtra("DO", "app");
    PendingIntent pApp = PendingIntent.getActivity(ctx, 4, app, 0);
    view.setOnClickPendingIntent(R.id.btn1, pApp);
}

}
}}}

Step3: Invoke it from the activity:
{{{e
    public void showNotification(View view){
        new MyNotification(this);
        finish();
    }
}}}

# [EndToEnd] Toast and Android Dialog.
Step 1: Building a simple Toast:
{{{e
    TODO.
}}}

Step 2: Having a Simple Dialog with OK.
{{{e
new AlertDialog.Builder(YourActivity.this)
              .setTitle("Your Alert")
              .setMessage("Your Message")
              .setCancelable(false)
              .setPositiveButton("ok", new OnClickListener() {
                  @Override
                  public void onClick(DialogInterface dialog, int which) {
                      // Whatever...
                  }
              }).show();
}}}
Step 3: Having a Simple Dialog with YES/NO.
{{{e
new AlertDialog.Builder(this)
        .setTitle("AlertDialog");
        .setMessage("Would you like to continue learning how to use Android alerts?");
        .setPositiveButton("Continue", null),
        .setNegativeButton("Cancel", null);
        .show();
}}}

Step 4: Having a Simple Dialog with YES/NO/Cancel.
{{{e
// Three button.
new AlertDialog.Builder(this)
        .setTitle("Notice")
        .setMessage("Launching this missile will destroy the entire universe. Is this what you intended to do?")
        .setPositiveButton("Launch missile", null)
        .setNeutralButton("Remind me later", null)
        .setNegativeButton("Cancel", null)
        .show();
// Hanlde buuton clicks
builder.setPositiveButton("Launch missile", new DialogInterface.OnClickListener() {
    @Override
    public void onClick(DialogInterface dialog, int which) {
        // do something like...
        launchMissile();
    }
});
}}}
Step 5: Using Dialog builder 
{{{e
// Having a builder and create dialogs.
AlertDialog.Builder builder;
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    builder = new AlertDialog.Builder(context, android.R.style.Theme_Material_Dialog_Alert);
} else {
    builder = new AlertDialog.Builder(context);
}
...
 // create and show the alert dialog
AlertDialog dialog = builder.create();
dialog.show();

}}}
Step 6: Traditional single-choice list: Hvaing a list of item in Dilogas and choose one of them
{{{e
AlertDialog.Builder builder = new AlertDialog.Builder(this);
builder.setTitle("Choose an animal");
String[] animals = {"horse", "cow", "camel", "sheep", "goat"};
builder.setItems(animals, new DialogInterface.OnClickListener() {
    @Override
    public void onClick(DialogInterface dialog, int which) {
        switch (which) {
            case 0: // horse
            case 1: // cow
            case 2: // camel
            case 3: // sheep
            case 4: // goat
        }
    }
});
AlertDialog dialog = builder.create();
dialog.show();
}}}

Step 7: Persistent single-choice list (radio buttons): Dillog with radio button list:
{{{e
AlertDialog.Builder builder = new AlertDialog.Builder(context);
builder.setTitle("Choose an animal");
String[] animals = {"horse", "cow", "camel", "sheep", "goat"};
int checkedItem = 1; // cow
builder.setSingleChoiceItems(animals, checkedItem, new DialogInterface.OnClickListener() {
    @Override
    public void onClick(DialogInterface dialog, int which) {
        // user checked an item
    }
});
// add OK and Cancel buttons
builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
    @Override
    public void onClick(DialogInterface dialog, int which) {
        // user clicked OK
    }
});
builder.setNegativeButton("Cancel", null);
AlertDialog dialog = builder.create();
dialog.show();
}}}
Step 8:  Persistent multiple-choice list (checkboxes)
{{{e
AlertDialog.Builder builder = new AlertDialog.Builder(context);
builder.setTitle("Choose some animals");
String[] animals = {"horse", "cow", "camel", "sheep", "goat"};
boolean[] checkedItems = {true, false, false, true, false};
builder.setMultiChoiceItems(animals, checkedItems, new DialogInterface.OnMultiChoiceClickListener() {
    @Override
    public void onClick(DialogInterface dialog, int which, boolean isChecked) {
        // user checked or unchecked a box
    }
});
builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
    @Override
    public void onClick(DialogInterface dialog, int which) {
        // user clicked OK
    }
});
builder.setNegativeButton("Cancel", null);
AlertDialog dialog = builder.create();
dialog.show()
}}}

Step 9: Having a custom view to a dialog.
{{{e
// have your own custom_layout.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="vertical"
              android:paddingLeft="20dp"
              android:paddingRight="20dp"
              android:layout_width="match_parent"
              android:layout_height="match_parent">
    <EditText
        android:id="@+id/editText"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>
</LinearLayout>

// Add this code in your main activity.
    AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Name");
        // set the custom layout
        final View customLayout = getLayoutInflater().inflate(R.layout.custom_layout, null);
        builder.setView(customLayout);
        // add a button
        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                // send data from the AlertDialog to the Activity
                EditText editText = customLayout.findViewById(R.id.editText);
                sendDialogDataToActivity(editText.getText().toString());
            }
        });
        // create and show the alert dialog
        AlertDialog dialog = builder.create();
        dialog.show();
}}}

Step 10: Uisng Dialog Fragemnets: DialogFragment is a specialized Fragment used when you want to display an overlay modal window within an activity that floats on top of the rest of the content.
{{{

    <!-- fragment_edit_name.xml -->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
	android:id="@+id/edit_name"
	android:layout_width="wrap_content" android:layout_height="wrap_content"
	android:layout_gravity="center" android:orientation="vertical"  >

	<TextView
		android:id="@+id/lbl_your_name" android:text="Your name" 
		android:layout_width="wrap_content" android:layout_height="wrap_content" />

	<EditText
		android:id="@+id/txt_your_name"
		android:layout_width="match_parent"  android:layout_height="wrap_content" 
		android:inputType="text"
		android:imeOptions="actionDone" />
</LinearLayout>
public class EditNameDialogFragment extends DialogFragment {
	private EditText mEditText;
	public EditNameDialogFragment() {
		// Empty constructor is required for DialogFragment
	}
	public static EditNameDialogFragment newInstance(String title) {
		EditNameDialogFragment frag = new EditNameDialogFragment();
		Bundle args = new Bundle();
		args.putString("title", title);
		frag.setArguments(args);
		return frag;
	}
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		return inflater.inflate(R.layout.fragment_edit_name, container);
	}
	@Override
	public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
		super.onViewCreated(view, savedInstanceState);
		// Get field from view
		mEditText = (EditText) view.findViewById(R.id.txt_your_name);
		// Fetch arguments from bundle and set title
		String title = getArguments().getString("title", "Enter Name");
		getDialog().setTitle(title);
		// Show soft keyboard automatically and request focus to field
		mEditText.requestFocus();
		getDialog().getWindow().setSoftInputMode(
		    WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
	}
}
// Invoke
public class DialogDemoActivity extends AppCompatActivity {
  @Override
  public void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      setContentView(R.layout.main);
      showEditDialog();
  }
  private void showEditDialog() {
      FragmentManager fm = getSupportFragmentManager();
      EditNameDialogFragment editNameDialogFragment = EditNameDialogFragment.newInstance("Some Title");
      editNameDialogFragment.show(fm, "fragment_edit_name");
  }
}
}}}
Step 11: Uisng Dialog Fragemnets without custom View.: We can create traditinal dialog using DialogFragemnt as below:
{{{e
class MyAlertDialogFragment extends DialogFragment {
    public MyAlertDialogFragment() {
          // Empty constructor required for DialogFragment
    }
    public static MyAlertDialogFragment newInstance(String title) {
        MyAlertDialogFragment frag = new MyAlertDialogFragment();
    	Bundle args = new Bundle();
    	args.putString("title", title);
    	frag.setArguments(args);
    	return frag;
    }
    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
        String title = getArguments().getString("title");
        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getActivity());
        alertDialogBuilder.setTitle(title);
        alertDialogBuilder.setMessage("Are you sure?");
        alertDialogBuilder.setPositiveButton("OK",  new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                // on success
            }
        });
        alertDialogBuilder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
            if (dialog != null && dialog.isShowing()) { 
                 dialog.dismiss();
              }
            }
        });
        return alertDialogBuilder.create();
    }
}
}}}
Step 12: Passing data to activity Using Custom Callback mechisam. . You can also do that using customCreated Listner. In short: you Define an interface with methods that can be invoked to pass data result to the activity, etup a view event which invokes the custom listener passing data through the method abd Implement the interface in the Activity defining behavior for when the event is triggere
{{{e
public class EditNameDialogFragment extends DialogFragment implements OnEditorActionListener {
    private EditText mEditText;
    // 1. Defines the listener interface with a method passing back data result.
    public interface EditNameDialogListener {
        void onFinishEditDialog(String inputText);
    }
	
    // ...
    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        // ...
        // 2. Setup a callback when the "Done" button is pressed on keyboard
        mEditText.setOnEditorActionListener(this);
    }
	// Step 3: Fires
    @Override
    public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
        if (EditorInfo.IME_ACTION_DONE == actionId) {
            // Return input text back to activity through the implemented listener
            EditNameDialogListener listener = (EditNameDialogListener) getActivity();
            // Calls Here --->
            listener.onFinishEditDialog(mEditText.getText().toString());
            // Close the dialog and return back to the parent activity
            dismiss();
            return true;
        }
        return false;
    }
}

And your activity needs to implement
public class DialogDemoActivity extends AppCompatActivity implements EditNameDialogListener {
    // This method is invoked in the activity when the listener is triggered Access the data result passed to the activity here
  @Override
  public void onFinishEditDialog(String inputText) {
  	Toast.makeText(this, "Hi, " + inputText, Toast.LENGTH_SHORT).show();
  }
}

}}}

# [EndToEnd] View pager
Step 1. Let's define the layout which holds ViewPager.
{{{e
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">
 
    <android.support.v4.view.ViewPager
        android:id="@+id/vpPager"
        android:layout_width="match_parent"
        android:layout_height="wrap_content">
    </android.support.v4.view.ViewPager>
</LinearLayout>

OR

<android.support.v4.view.ViewPager
   android:id="@+id/vpPager"
   android:layout_width="match_parent"
   android:layout_height="wrap_content">
   <android.support.v4.view.PagerTabStrip
        android:id="@+id/pager_header"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_gravity="top"
        android:paddingBottom="4dp"
        android:paddingTop="4dp" />
</android.support.v4.view.ViewPager>

OR

<com.viewpagerindicator.TitlePageIndicator
	android:id="@+id/titles"
	android:layout_height="wrap_content"
	android:layout_width="fill_parent" />
}}}

Step 2: Now Let's define some Fragemnets like FirstFragment, FirstFragment etc which will actually conatins of view for each page.
{{{e
public class FirstFragment extends Fragment {
	// Store instance variables
	private String title;
	private int page;
	// newInstance constructor for creating fragment with arguments
	public static FirstFragment newInstance(int page, String title) {
		FirstFragment fragmentFirst = new FirstFragment();
		Bundle args = new Bundle();
		args.putInt("someInt", page);
		args.putString("someTitle", title);
		fragmentFirst.setArguments(args);
		return fragmentFirst;
	}

	// Store instance variables based on arguments passed
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		page = getArguments().getInt("someInt", 0);
		title = getArguments().getString("someTitle");
	}

	// Inflate the view for the fragment based on layout XML
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, 
            Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.fragment_first, container, false);
		TextView tvLabel = (TextView) view.findViewById(R.id.tvLabel);
		tvLabel.setText(page + " -- " + title);
		return view;
	}
}  
}}}

Step 3: Now We need to provides a Adapter extending FragmentPagerAdapter, which is essentially holds all thrree fragments - will create and send it back as requested.
{{{e
public static class MyPagerAdapter extends FragmentPagerAdapter {
	    private static int NUM_ITEMS = 3;
        public MyPagerAdapter(FragmentManager fragmentManager) {
            super(fragmentManager);
        }
        // Returns total number of pages
        @Override
        public int getCount() {
            return NUM_ITEMS;
        }
        // Returns the fragment to display for that page
        @Override
        public Fragment getItem(int position) {
            switch (position) {
            case 0: // Fragment # 0 - This will show FirstFragment
                return FirstFragment.newInstance(0, "Page # 1");
            case 1: // Fragment # 0 - This will show FirstFragment different title
                return FirstFragment.newInstance(1, "Page # 2");
            case 2: // Fragment # 1 - This will show SecondFragment
                return SecondFragment.newInstance(2, "Page # 3");
            default:
            	return null;
            }
        }
        // Returns the page title for the top indicator
        @Override
        public CharSequence getPageTitle(int position) {
        	return "Page " + position;
        }
    }
}}}

Step 4: Now Let's define the activity whihc will bind everything - it will get the view pager view and initilize the adapter and then bind adapter with ViewPager.
{{{e
public class MainActivity extends AppCompatActivity {
	FragmentPagerAdapter adapterViewPager;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_home);
        // get View pager
		ViewPager vpPager = (ViewPager) findViewById(R.id.vpPager);
        // Build adapter
		adapterViewPager = new MyPagerAdapter(getSupportFragmentManager());
        // binds
		vpPager.setAdapter(adapterViewPager);
	}
	
	// Set and get pages
    vpPager.getCurrentItem(); // --> 2
    vpPager.setCurrentItem(2)

    // Attach the page change listener inside the activity
    vpPager.addOnPageChangeListener(new OnPageChangeListener() {
        @Override
        public void onPageSelected(int position) {
            Toast.makeText(HomeActivity.this, "Selected page position: " + position, Toast.LENGTH_SHORT).show();
            // This method will be invoked when a new page becomes selected.
        }
        @Override
        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
            // This method will be invoked when the current page is scrolled
        }
        @Override
        public void onPageScrollStateChanged(int state) {
            // Called when the scroll state changes: 
            // SCROLL_STATE_IDLE, SCROLL_STATE_DRAGGING, SCROLL_STATE_SETTLING
        }
    });

    // Set Offscreen Page Limit: provided by ViewPager to set how many page instances you want the system to keep in memory on either side of your current page. 
    vpPager.setOffscreenPageLimit(3);

    // Defien gaps between Pagers
    // http://blog.neteril.org/blog/2013/10/14/android-tip-viewpager-with-protruding-children/
    vpPager.setClipToPadding(false);
    vpPager.setPageMargin(12);

    //
}   
}}} 

Step 5: Using Custom animation. We can customize how the pages animate as they are being swiped between using the PageTransformer. 
{{{e
    // compile 'com.ToxicBakery.viewpager.transforms:view-pager-transforms:1.2.32@aar'
    pager = (ViewPager) findViewById(R.id.container);
    pager.setAdapter(mAdapter);
    pager.setPageTransformer(true, new RotateUpTransformer());
    // https://github.com/ToxicBakery/ViewPagerTransforms/tree/master/library/src/main/java/com/ToxicBakery/viewpager/transforms

    // Build your own.
    vpPager.setPageTransformer(false, new ViewPager.PageTransformer() { 
        @Override
        public void transformPage(View page, float position) {
            int pageWidth = view.getWidth();
            int pageHeight = view.getHeight();

            if (position < -1) { // [-Infinity,-1)
                // This page is way off-screen to the left.
                view.setAlpha(0);
            } else if(position <= 1){ // Page to the left, page centered, page to the right
            // modify page view animations here for pages in view 
            } else { // (1,+Infinity]
                // This page is way off-screen to the right.
                view.setAlpha(0);
            }
        }
    });
}}}

Step 6: Handling Dynamically genenarated pages 
{{{e
public class mAdapter extends PagerAdapter {
    List<View> mlist;

    public void addView(View view, int index) {
        mList.add(index, view);
        notifyDataSetChanged();
    }

    public void removeView(int index) {
        mList.remove(index);
        notifyDataSetChanged();
    }

    @Override
    public int getItemPosition(Object object) {
        if (mList.contains((View) object) {
            return mList.indexOf((View) object);
        } else {
            return POSITION_NONE;
        }
    }
}

}}}

Step 7: Custom Pages without Fragments
{{{e
class CustomPagerAdapter extends PagerAdapter {
    Context mContext;
    LayoutInflater mLayoutInflater;
    ArrayList<Page> pages = new ArrayList<>(); 
    public CustomPagerAdapter(Context context) {
        mContext = context;
        mLayoutInflater = LayoutInflater.from(mContext);
    }
    // Returns the number of pages to be displayed in the ViewPager.
    @Override
    public int getCount() {
        return pages.size();
    }
    // Returns true if a particular object (page) is from a particular page
    @Override
    public boolean isViewFromObject(View view, Object object) {
        return view == object;
    }
    // This method should create the page for the given position passed to it as an argument. 
    @Override
    public Object instantiateItem(ViewGroup container, int position) {
        // Inflate the layout for the page
        View itemView = mLayoutInflater.inflate(R.layout.pager_item, container, false);
        // Find and populate data into the page (i.e set the image)
        ImageView imageView = (ImageView) itemView.findViewById(R.id.imageView);
        // ...
        // Add the page to the container
        container.addView(itemView);
        // Return the page
        return itemView;
    }
    // Removes the page from the container for the given position.
    @Override
    public void destroyItem(ViewGroup container, int position, Object object) {
        container.removeView((View) object);
    }
}

OR

class CustomPagerAdapter extends PagerAdapter {
    Context mContext;
    LayoutInflater mLayoutInflater;
    int[] mResources = {
        R.drawable.first,
        R.drawable.second,
        R.drawable.third,
        R.drawable.fourth,
        R.drawable.fifth,
        R.drawable.sixth
    };

    public CustomPagerAdapter(Context context) {
        mContext = context;
        mLayoutInflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    }
    @Override
    public int getCount() {
        return mResources.length;
    }

    @Override
    public boolean isViewFromObject(View view, Object object) {
        return view == ((LinearLayout) object);
    }
 
    @Override
    public Object instantiateItem(ViewGroup container, int position) {
        View itemView = mLayoutInflater.inflate(R.layout.pager_item, container, false);
        ImageView imageView = (ImageView) itemView.findViewById(R.id.imageView);
        imageView.setImageResource(mResources[position]);
        container.addView(itemView);
        return itemView;
    }
    @Override
    public void destroyItem(ViewGroup container, int position, Object object) {
        container.removeView((LinearLayout) object);
    }
}
// res/layout/pager_item.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:layout_width="match_parent"
    android:layout_height="match_parent">
    <ImageView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:id="@+id/imageView" />
</LinearLayout>
}}}


Example: Listen text xhnage of Edit Text
{{{
EditText value = (EditText) view.findViewById(R.id.value);
value.addTextChangedListener(new TextWatcher()
{
    @Override
    public void beforeTextChanged(CharSequence s, int start, int count, int after)
    {

    }

    @Override
    public void onTextChanged(CharSequence s, int start, int before, int count)
    {

    }

    @Override
    public void afterTextChanged(Editable s)
    {
        HashMap<String, String> edit = new HashMap<>();

        edit.put("string", s.toString());

        openEntry.edit_list.add(edit);
    }
});
}}}
Example: Have a Simple Guesture detcetor
{{{
GestureDetector myG;
myG = new GestureDetector(this,new Gesture());
   
class Gesture extends GestureDetector.SimpleOnGestureListener{
   public boolean onSingleTapUp(MotionEvent ev) {
   }
   
   public void onLongPress(MotionEvent ev) {
   }
   
   public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX,
   float distanceY) {
   }
   
   public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
   float velocityY) {
   }
}

// Here is your activity.

import android.app.Activity;
import android.graphics.Matrix;
import android.os.Bundle;

import android.view.MotionEvent;
import android.view.ScaleGestureDetector;
import android.widget.ImageView;

public class MainActivity extends Activity {
   private ImageView iv;
   private Matrix matrix = new Matrix();
   private float scale = 1f;
   private ScaleGestureDetector SGD;

   @Override
   protected void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      setContentView(R.layout.activity_main);

      iv=(ImageView)findViewById(R.id.imageView);
      SGD = new ScaleGestureDetector(this,new ScaleListener());
   }

   public boolean onTouchEvent(MotionEvent ev) {
      SGD.onTouchEvent(ev);
      return true;
   }

   private class ScaleListener extends ScaleGestureDetector.
      SimpleOnScaleGestureListener {
      
      @Override
      public boolean onScale(ScaleGestureDetector detector) {
         scale *= detector.getScaleFactor();
         scale = Math.max(0.1f, Math.min(scale, 5.0f));
         matrix.setScale(scale, scale);
         iv.setImageMatrix(matrix);
         return true;
      }
   }
}

}}}
Example: Click and Long Click
{{{
import android.app.ProgressDialog;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

public class MainActivity extends ActionBarActivity {
   private ProgressDialog progress;
   Button b1,b2;

   @Override
   protected void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      setContentView(R.layout.activity_main);
      progress = new ProgressDialog(this);

      b1=(Button)findViewById(R.id.button);
      b2=(Button)findViewById(R.id.button2);
      b1.setOnClickListener(new View.OnClickListener() {
         
         @Override
         public void onClick(View v) {
            TextView txtView = (TextView) findViewById(R.id.textView);
            txtView.setTextSize(25);
         }
      });

      b2.setOnClickListener(new View.OnClickListener() {
         
         @Override
         public void onClick(View v) {
            TextView txtView = (TextView) findViewById(R.id.textView);
            txtView.setTextSize(55);
         }
      });
   }
}
}}}

Example: Some Touch Evnets
{{{
import android.app.Activity;
import android.os.Bundle;
import android.view.MotionEvent;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;

public class MainActivity extends Activity {
   float xAxis = 0f;
   float yAxis = 0f;

   float lastXAxis = 0f;
   float lastYAxis = 0f;

   EditText ed1, ed2, ed3, ed4;
   TextView tv1;

   @Override
   protected void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      setContentView(R.layout.activity_main);

      ed1 = (EditText) findViewById(R.id.editText);
      ed2 = (EditText) findViewById(R.id.editText2);
      ed3 = (EditText) findViewById(R.id.editText3);
      ed4 = (EditText) findViewById(R.id.editText4);

      tv1=(TextView)findViewById(R.id.textView2);
		
      tv1.setOnTouchListener(new View.OnTouchListener() {
         @Override
         public boolean onTouch(View v, MotionEvent event) {
            final int actionPeformed = event.getAction();

            switch(actionPeformed){
               case MotionEvent.ACTION_DOWN:{
                  final float x = event.getX();
                  final float y = event.getY();

                  lastXAxis = x;
                  lastYAxis = y;

                  ed1.setText(Float.toString(lastXAxis));
                  ed2.setText(Float.toString(lastYAxis));
                  break;
               }

               case MotionEvent.ACTION_MOVE:{
                  final float x = event.getX();
                  final float y = event.getY();

                  final float dx = x - lastXAxis;
                  final float dy = y - lastYAxis;

                  xAxis += dx;
                  yAxis += dy;

                  ed3.setText(Float.toString(xAxis));
                  ed4.setText(Float.toString(yAxis));
                  break;
               }
            }
            return true;
         }
      });
   }
}
}}}


Example: Here is the simple Notification example
{{{
public class MainActivity extends Activity {
   Button b1;
   @Override
   protected void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      setContentView(R.layout.activity_main);

      b1 = (Button)findViewById(R.id.button);
      b1.setOnClickListener(new View.OnClickListener() {
         @Override
         public void onClick(View v) {
            addNotification();
         }
      });
   }

   private void addNotification() {
      NotificationCompat.Builder builder =
         new NotificationCompat.Builder(this)
         .setSmallIcon(R.drawable.abc)
         .setContentTitle("Notifications Example")
         .setContentText("This is a test notification");

      Intent notificationIntent = new Intent(this, MainActivity.class);
      PendingIntent contentIntent = PendingIntent.getActivity(this, 0, notificationIntent,
         PendingIntent.FLAG_UPDATE_CURRENT);
      builder.setContentIntent(contentIntent);

      // Add as notification
      NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
      manager.notify(0, builder.build());
   }
}
}}}

Example: Here I will sow you of all Kind of alrt dialog
{{{
// Simple AlertDiloags
AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);
alertDialogBuilder.setPositiveButton(CharSequence text, DialogInterface.OnClickListener listener)
alertDialogBuilder.setNegativeButton(CharSequence text, DialogInterface.OnClickListener listener)
AlertDialog alertDialog = alertDialogBuilder.create();
alertDialog.show();

// Using Dialog Fragments
public class DialogFragment extends DialogFragment {
   @Override
   public Dialog onCreateDialog(Bundle savedInstanceState) {
      // Use the Builder class for convenient dialog construction
      AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
      builder.setPositiveButton(R.string.fire, new DialogInterface.OnClickListener() {
         public void onClick(DialogInterface dialog, int id) {
            toast.makeText(this,"enter a text here",Toast.LENTH_SHORT).show();
         }
      })
      .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
         public void onClick(DialogInterface dialog, int id) {
            finish();
         });
         // Create the AlertDialog object and return it
         return builder.create();
      }
   }
}

// Show List in the Dilaog
public Dialog onCreateDialog(Bundle savedInstanceState) {
   AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
   builder.setTitle(Pick a Color)
   
   .setItems(R.array.colors_array, new DialogInterface.OnClickListener() {
      public void onClick(DialogInterface dialog, int which) {
         // The 'which' argument contains the index position
         // of the selected item
      }
   });
   return builder.create();
}

// Single-choice list dialog
public Dialog onCreateDialog(Bundle savedInstanceState) {
   mSelectedItems = new ArrayList();
   AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
   
   builder.setTitle("This is list choice dialog box");
   .setMultiChoiceItems(R.array.toppings, null,
      new DialogInterface.OnMultiChoiceClickListener() {
      @Override
      public void onClick(DialogInterface dialog, int which, boolean isChecked) {
         if (isChecked) {
            // If the user checked the item, add it to the selected items
            mSelectedItems.add(which);
         }
         
         else if (mSelectedItems.contains(which)) {
            // Else, if the item is already in the array, remove it 
            mSelectedItems.remove(Integer.valueOf(which));
         }
      }
   })
   
   // Set the action buttons
   .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
      @Override
      public void onClick(DialogInterface dialog, int id) {
         // User clicked OK, so save the mSelectedItems results somewhere
         // or return them to the component that opened the dialog
         ...
      }
   })
   
   .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
      @Override
      public void onClick(DialogInterface dialog, int id) {
         ...
      }
   });
   return builder.create();
}
}}}

Example: Let's have an example of all dialog.
{{{
import android.app.ProgressDialog;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;

public class MainActivity extends ActionBarActivity {
   Button b1;
   private ProgressDialog progress;
   
   protected void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      setContentView(R.layout.activity_main);
      b1 = (Button) findViewById(R.id.button2);
   }
   
   public void testProgressDilog(View view){
      progress=new ProgressDialog(this);
      progress.setMessage("Downloading Music");
      progress.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
      progress.setIndeterminate(true);
      progress.setProgress(0);
      progress.show();
      
      final int totalProgressTime = 100;
      final Thread t = new Thread() {
         @Override
         public void run() {
            int jumpTime = 0;
            
            while(jumpTime < totalProgressTime) {
               try {
                  sleep(200);
                  jumpTime += 5;
                  progress.setProgress(jumpTime);
               } catch (InterruptedException e) {
                  // TODO Auto-generated catch block
                  e.printStackTrace();
               }
            }
         }
      };
      t.start();
   }
   // test Date DatePicker
    calendar = Calendar.getInstance();
    year = calendar.get(Calendar.YEAR);
    month = calendar.get(Calendar.MONTH);
    day = calendar.get(Calendar.DAY_OF_MONTH);
    showDate(year, month+1, day);
      
    private DatePickerDialog.OnDateSetListener myDateListener = new 
      DatePickerDialog.OnDateSetListener() {
      @Override
      public void onDateSet(DatePicker arg0, 
         int arg1, int arg2, int arg3) {
         // TODO Auto-generated method stub
         // arg1 = year
         // arg2 = month
         // arg3 = day
         showDate(arg1, arg2+1, arg3);
      }
   };
}}}

Example: Sample Linier layouts
{{{
import android.os.Bundle;
import android.app.Activity;

public class MainActivity extends Activity {
   @Override
   protected void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      setContentView(R.layout.activity_main);
   }
}
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
   android:layout_width="fill_parent"
   android:layout_height="fill_parent"
   android:orientation="vertical" >
   <Button android:id="@+id/btnStartService"
      android:layout_width="270dp"
      android:layout_height="wrap_content"
      android:text="start_service"/>
   <Button android:id="@+id/btnPauseService"
      android:layout_width="270dp"
      android:layout_height="wrap_content"
      android:text="pause_service"/>
      
   <Button android:id="@+id/btnStopService"
      android:layout_width="270dp"
      android:layout_height="wrap_content"
      android:text="stop_service"/>
</LinearLayout>
}}}

Example: Let's see an example of all Mostly usefule control :
{{{
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
   android:layout_width="fill_parent"
   android:layout_height="fill_parent"
   android:orientation="vertical" >
   
   <TextView android:id="@+id/text"
      android:layout_width="wrap_content"
      android:layout_height="wrap_content"
      android:text="I am a TextView" />
   
   <Button android:id="@+id/button"
      android:layout_width="wrap_content"
      android:layout_height="wrap_content"
      android:text="I am a Button" />
    
    <EditText
      android:id="@+id/edittext"
      android:layout_width="fill_parent"
      android:layout_height="wrap_content"
      android:layout_alignLeft="@+id/button"
      android:layout_below="@+id/textView1"
      android:layout_marginTop="61dp"
      android:ems="10"
      android:text="@string/enter_text" android:inputType="text" />

    <AutoCompleteTextView
      android:id="@+id/autoCompleteTextView1"
      android:layout_width="wrap_content"
      android:layout_height="wrap_content"
      android:layout_alignLeft="@+id/textView2"
      android:layout_below="@+id/textView2"
      android:layout_marginTop="54dp"
      android:ems="10" />
   <ImageButton
      android:layout_width="wrap_content"
      android:layout_height="wrap_content"
      android:id="@+id/imageButton"
      android:layout_centerVertical="true"
      android:layout_centerHorizontal="true"
      android:src="@drawable/abc"/>
    <CheckBox
      android:id="@+id/checkBox1"
      android:layout_width="wrap_content"
      android:layout_height="wrap_content"
      android:text="Do you like Tutorials Point"
      android:layout_above="@+id/button"
      android:layout_centerHorizontal="true" />
   <ToggleButton
      android:layout_width="wrap_content"
      android:layout_height="wrap_content"
      android:text="On"
      android:id="@+id/toggleButton"
      android:checked="true"
      android:layout_below="@+id/imageButton"
      android:layout_toEndOf="@+id/button2/>
    <RadioGroup
      android:layout_width="fill_parent"
      android:layout_height="90dp"
      android:layout_below="@+id/imageView"
      android:layout_marginTop="58dp"
      android:weightSum="1"
      android:id="@+id/radioGroup"
      android:layout_alignLeft="@+id/textView2"
      android:layout_alignStart="@+id/textView2"
      android:layout_alignRight="@+id/textView3"
      android:layout_alignEnd="@+id/textView3">
      <RadioButton
         android:layout_width="wrap_content"
         android:layout_height="55dp"
         android:text="Male"
         android:id="@+id/radioButton"
         android:layout_gravity="center_horizontal"
         android:checked="false"
         android:textSize="25dp" />
      <RadioButton
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:text="Female"
         android:id="@+id/radioButton2"
         android:layout_gravity="center_horizontal"
         android:checked="false"
         android:textSize="25dp"
         android:layout_weight="0.13" />
   </RadioGroup>
    <Spinner
      android:id="@+id/spinner"
      android:layout_width="fill_parent"
      android:layout_height="wrap_content"
      android:prompt="@string/spinner_title"/>
    <TimePicker
   android:id="@+id/timePicker1"
   android:layout_width="wrap_content"
   android:layout_height="wrap_content" />
</LinearLayout>

import android.os.Bundle;
import android.app.Activity;
import android.view.Menu;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;

public class MainActivity extends Activity {
   AutoCompleteTextView autocomplete;
   
   String[] arr = { "Paries,France", "PA,United States","Parana,Brazil", 
      "Padua,Italy", "Pasadena,CA,United States"};
   
   @Override
   protected void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      setContentView(R.layout.activity_main);

      // Autocomplte
      autocomplete = (AutoCompleteTextView)             
      findViewById(R.id.autoCompleteTextView1);
      ArrayAdapter<String> adapter = new ArrayAdapter<String>  
      (this,android.R.layout.select_dialog_item, arr);
      autocomplete.setThreshold(2);
      autocomplete.setAdapter(adapter);

      button.setOnClickListener(new View.OnClickListener() {
         @Override
         public void onClick(View v) {
            StringBuffer result = new StringBuffer();
            result.append("Thanks : ").append(ch1.isChecked());
            result.append("\nThanks: ").append(ch2.isChecked());
            Toast.makeText(MainActivity.this, result.toString(), 
               Toast.LENGTH_LONG).show();
         }
      });
   }

   void testSpinner(){
      Spinner spinner = (Spinner) findViewById(R.id.spinner);
      spinner.setOnItemSelectedListener(new onItemSelected(AdapterView<?> parent, View view, int position, long id) {
        String item = parent.getItemAtPosition(position).toString();
        Toast.makeText(parent.getContext(), "Selected: " + item, Toast.LENGTH_LONG).show();
    });
      
      // Spinner Drop down elements
      List<String> categories = new ArrayList<String>();
      categories.add("Automobile");
      categories.add("Business Services");
      categories.add("Computers");
      categories.add("Education");
      categories.add("Personal");
      categories.add("Travel");

      ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, categories);
      dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
      spinner.setAdapter(dataAdapter);
   }
    // Timer
    import android.widget.TimePicker;
    private TimePicker timePicker1;
    timePicker1 = (TimePicker) findViewById(R.id.timePicker1);
    int hour = timePicker1.getCurrentHour();
    int min = timePicker1.getCurrentMinute();
}
}}}



# Android fragments
A fragment is a reusable class implementing a portion of an activity.
-  Reuseness: It's basically a combination of an XML layout file and a java class much like an Activity which encapsulate views and logic so that it is easier to reuse within activities.
- Standalone: Fragments are standalone components that can contain views, events and logic.
- Navigation patatrens: In a fragment-oriented architecture, activities become navigational containers that are primarily responsible for navigation fragment tp fragemnts/activity - presenting fragments and passing data.
- Activities are navigation controllers primarily responsible for navigation to other activities through intents, where as Fragments are content controllers and contain most views, layouts, and event logic.
- Like Activity, A fragment has an XML layout file and a Java class that represents the Fragment controller.
- Fragment has it;s own lifecyclic callback functions: The onCreateView() method is called when Fragment should create its View object hierarchy. onViewCreated()  is triggered soon after onCreateView() and any view setup should performed here. Her have a list of other methos given Below
Table: Callbacks
onAttach()    # is called when a fragment is connected to an activity.
onCreate()    # is called to do initial creation of the fragment.
onCreateView() # is called by Android once the Fragment should inflate a view.
onViewCreated() # is called after onCreateView() and ensures that the fragment's root view is non-null. Any view setup should happen here. E.g., view lookups, attaching listeners.
onActivityCreated() # is called when host activity has completed its onCreate() method.
onStart() # is called once the fragment is ready to be displayed on screen.
onResume() # Allocate “expensive” resources such as registering for location, sensor updates, etc.
onPause() # Release “expensive” resources. Commit any changes.
onDestroyView() # is called when fragment's view is being destroyed, but the fragment is still kept around.
onDestroy() # is called when fragment is no longer in use.
onDetach() # is called when fragment is no longer connected to the activity.

- Fragment can't work by alone. It must be embeded inside the Activity  - either in XML files or adding it dynamically. It can be noted that, Before embedding a "support" fragment in an Activity make sure the Activity is changed to extend from FragmentActivity or AppCompatActivity which adds support for the fragment manager to all Android versions.
- If we have Fragment Holder, it is possible to add, remkove and replace fragemnts uisng  FragmentTransaction .
- Fragments should generally only communicate with their direct parent activity. If two fragemnts needs to comunicate, they should do that though Activity. Here, Activity is treaed as the controller managing all interaction with each of the fragments contained within. fragments should not directly communicate with each other as they needs to be modular, standalone and reusable component. Here are the possible way to do the communication:
1. Activities can initialize fragments with data during construction: pass data though the constracter of fragmnets.
2. Activities can pass data to fragments using methods on the fragment instance: Pass data using member function of fragments,
3. Fragments can communicate up to their parent activity using an interface and listeners: Fragemnt defines the callback inetrface and Parenet implementing it.
4. Fragments should pass data to other fragments only routed through their parent activity
5. Fragments can pass data to and from dialog fragments though the interface like sendBackResult.
6. Fragments can contain nested child fragments as outlined here




First, let;s define a xml file which will be render as a part of fragemnts
{{{
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent" android:layout_height="match_parent"
    android:orientation="vertical" >
    <TextView
        android:id="@+id/textView1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="TextView" />
    <Button
        android:id="@+id/button1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Button" />
</LinearLayout>
}}}

Second, Let's define the Fragment class which influate the view in xmlns
{{{
import android.support.v4.app.Fragment;
public class FooFragment extends Fragment {
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup parent, Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_foo, parent, false);
    }
    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        // EditText etFoo = (EditText) view.findViewById(R.id.etFoo);
        // Add listners
    }
}
}}}

Thirds, Now we can add the fragemnts inside activity layout as
{{{
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" >
    <fragment
        android:name="com.example.android.FooFragment"
        android:id="@+id/fooFragment"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />
</LinearLayout>
}}}
OR
{{{
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" >
  <FrameLayout
       android:id="@+id/your_placeholder" <<< Placeholder
       android:layout_width="match_parent"
       android:layout_height="match_parent">
  </FrameLayout>
</LinearLayout>
}}}

Forth, This can now refer by Activity( if it is statically linked) or can be loaded dynamically using FragmentManager. We can lookup fragments either using ID or TAG or Pagers
{{{
public class MainActivity extends AppCompatActivity {
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (savedInstanceState == null) {
          // Look up by ID.
          DemoFragment fragmentDemo = (DemoFragment)
              getSupportFragmentManager().findFragmentById(R.id.fragmentDemo);

          //ADD THE TAG
          getSupportFragmentManager().beginTransaction().
              replace(R.id.flContainer, new DemoFragment(), "SOMETAG").
              commit();
          // Now later we can lookup the fragment by tag
          DemoFragment fragmentDemo = (DemoFragment)
              getSupportFragmentManager().findFragmentByTag("SOMETAG");

          // If you have view pager do this like.
          adapterViewPager.getRegisteredFragment(0);

          // Add Fragemnts Dynamically: It;s a three step procress.
          FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
          ft.replace(R.id.your_placeholder, new FooFragment());
          ft.commit();
        }
    }
}
}}}

Fifth, Let;s pass some data to the fragment while creating, generally It can be done using static method. This is because a Fragment must have only a constructor with no arguments.
{{{
public class DemoFragment extends Fragment {
    // Creates a new fragment given an int and title
    // DemoFragment.newInstance(5, "Hello");
    public static DemoFragment newInstance(int someInt, String someTitle) {
        DemoFragment fragmentDemo = new DemoFragment();
        Bundle args = new Bundle();
        args.putInt("someInt", someInt);
        args.putString("someTitle", someTitle);
        fragmentDemo.setArguments(args);
        return fragmentDemo;
    }
   @Override
   public void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);
       int SomeInt = getArguments().getInt("someInt", 0);
       String someTitle = getArguments().getString("someTitle", "");
   }
}
// Calls from Activity.
public class MainActivity extends AppCompatActivity {
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
        DemoFragment fragmentDemo = DemoFragment.newInstance(5, "my title");
        ft.replace(R.id.your_placeholder, fragmentDemo);
        ft.commit();
    }
}
}}}

Let's define a fragemnt and pass the data on runtime.
{{{
// Have Fragment
public class DemoFragment extends Fragment {
  public void doSomething(String param) {
      // handle this data.
  }
}
// In Activity.
public class MainActivity extends AppCompatActivity {
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        DemoFragment fragmentDemo = (DemoFragment)
            getSupportFragmentManager().findFragmentById(R.id.fragmentDemo);
        fragmentDemo.doSomething("some param");
    }
}
}}}

Now, Let;s try to pass some data from fragemnt to Activity.
{{{
import android.support.v4.app.Fragment;
public class MyListFragment extends Fragment {
  private OnItemSelectedListener listener;

  public interface OnItemSelectedListener {
    public void onItemSelected(String link);
  }

  // Store the listener (activity) that will have events fired once the fragment is attached
  @Override
  public void onAttach(Context context) {
      super.onAttach(context);
      if (context instanceof OnItemSelectedListener) {
        listener = (OnItemSelectedListener) context;
      } else {
        throw new ClassCastException(context.toString()
            + " must implement MyListFragment.OnItemSelectedListener");
      }
  }

  public void onSomeClick(View v) {
     listener.onItemSelected("some link");
  }
}
// Activity implements the Callback.
import android.support.v7.app.AppCompatActivity;
public class RssfeedActivity extends AppCompatActivity implements MyListFragment.OnItemSelectedListener {
    private DetailFragment fragment;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_rssfeed);
        fragment = (DetailFragment) getSupportFragmentManager() .findFragmentById(R.id.detailFragment);
  }

  @Override
  public void onItemSelected(String link) {
      if (fragment != null && fragment.isInLayout()) {
          // Handle the result.
      }
  }
}
}}}

The FragmentManager is responsible for all runtime management of fragments including adding, removing, hiding, showing, or otherwise navigating between fragments. It suppprts below method to do some work:
1. addOnBackStackChangedListener - Add a new listener for changes to the fragment back stack.
2. beginTransaction() - Creates a new transaction to change fragments at runtime.
3. findFragmentById(int id) -	Finds a fragment by id usually inflated from activity XML layout.
4. findFragmentByTag(String tag):	Finds a fragment by tag usually for a runtime added fragment.
5. popBackStack() -	Remove a fragment from the backstack.
6. executePendingTransactions()	Forces committed transactions to be applied.

Here is an example of Fragment Trasation:
{{{

}}}

Using fragmen, it is possible to customize the backStack operation. A record of all Fragment transactions is kept for each Activity by the FragmentManager. When used properly, this allows the user to hit the device’s back button to remove previously added Fragments.
{{{e
//add to backStack
FragmentTransaction fts = getSupportFragmentManager().beginTransaction();
fts.replace(R.id.flContainer, new FirstFragment());
fts.addToBackStack("optional_tag");
fts.commit();

// Just remove the lastly added.
FragmentManager fragmentManager = getSupportFragmentManager();
if (fragmentManager.getBackStackEntryCount() > 0) {
    fragmentManager.popBackStack();
}

//Just go back to specif TAG
FragmentManager fragmentManager = getSupportFragmentManager();
if (fragmentManager.getBackStackEntryCount() > 0) {
    fragmentManager.popBackStack("optional_tag");
}
}}}

We can easily show/hide the fragemnt then calling replaces - This can be good because this will release memory and make the UI snappier. For example :
{{{
private FragmentA fragmentA;
private FragmentB fragmentB;
private FragmentC fragmentC;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    if (savedInstanceState == null) {
        fragmentA = FragmentA.newInstance("foo");
        fragmentB = FragmentB.newInstance("bar");
        fragmentC = FragmentC.newInstance("baz");
    }
}

// NOT so good
protected void displayFragmentA() {
    FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
    // removes the existing fragment calling onDestroy
    ft.replace(R.id.flContainer, fragmentA);
    ft.commit();
}

// Better
protected void displayFragmentA() {
    FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
    if (fragmentA.isAdded()) { // if the fragment is already in container
        ft.show(fragmentA);
    } else { // fragment needs to be added to frame container
        ft.add(R.id.flContainer, fragmentA, "A");
    }
    // Hide fragment B
    if (fragmentB.isAdded()) { ft.hide(fragmentB); }
    // Hide fragment C
    if (fragmentC.isAdded()) { ft.hide(fragmentC); }
    // Commit changes
    ft.commit();
}
}}}


# Executing Async Jobs in android.


# WebSocket Support to Android

Step1: Let's consider the below example for build the server.
{{{
const WebSocket = require('ws');
const wss = new WebSocket.Server({ port: 8080 });
wss.on('connection', function connection(ws) {
  ws.on('message', function incoming(message) {
    console.log('received: %s', message);
  });
  ws.send('something');
});

// Store this as server.js file.
// $node server.js
}}}


Step2: Let's test the code from sample HTML
{{{
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title> WebSocket</title>
  <script src="/socket.io/socket.io.js" ></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js"></script>
  <script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>
  <script>
      var socket = io.connect('http://0.0.0.0:8088');
      socket.on('message', function (data) {
        console.log(data);
        socket.emit('my other event', { my: 'data' });
      });
      function send(){
        socket.emit('message', {tag: 'info',data:"hello"});
      }
  </script>
</head>
<body>
  <button type="button" onclick="send();">Click Me!</button>
</body>
</html>
}}}
Step3: Now let's write android plagins to send and recv data from our server.
{{{

}}}


## Support personalize Experice.
In this perticulr section, i will be discussion with how to personalized your app experince for the user. The term "Personlization" means that your app should resposnce perfactly for the multiple devices, user can choose their languages and user can have their own theme etc.

Table: Summary of having a better Personalized experince
Supporting mutiple languages # Example to support mutiple languages
Supporting seperate layout for differnt devices # Having different layout for diffent devices.
Supporting diffent dimens for diffent devices # Having multiple dimes for diff devices.
Supporting multiple images # Supporting multiple images for diffent size device

# Supporting mutiple languages
Let's consider supporting hindi and english langues for a app.
Step1: Let;s have this layout. Note that we NOT hardcoding the string.
{{{

}}}
Step2: Define the defalut string in res/values/strings.xml.
{{{

}}}
Step3: Define the hindi language string in res/values/strings-hi.xml. You can support mutiple languages using the file name as res/values/strings-<language-code>.xml
{{{

}}}

Step 4: Now we we just have the  fun. You can go the device setting -> personal -> languages -> choose language and You will see the language of the app has chnages. We can do it programitically as below:
{{{
import android.app.Activity;
import android.content.res.Configuration;
import android.os.Bundle;

public class Main extends Activity {
  /** Called when the activity is first created. */
  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    String languageToLoad  = "fa"; // your language "hi" for hindi and "en" for english
    Locale locale = new Locale(languageToLoad);
    Locale.setDefault(locale);
    Configuration config = new Configuration();
    config.locale = locale;
    getBaseContext().getResources().updateConfiguration(config,
      getBaseContext().getResources().getDisplayMetrics());
    this.setContentView(R.layout.main);
  }
  private void change(){
    Resources res = context.getResources();
    // Change locale settings in the app.
    DisplayMetrics dm = res.getDisplayMetrics();
    android.content.res.Configuration conf = res.getConfiguration();
    conf.setLocale(new Locale(language_code.toLowerCase())); // API 17+ only.
    // Use conf.locale = new Locale(...) if targeting lower versions
    res.updateConfiguration(conf, dm);
  }
}
}}}
Step 5: You can persisit the language choice for the app as below:
{{{
public class BaseActivity extends AppCompatActivity {
    private Locale mCurrentLocale;
    @Override
    protected void onStart() {
        super.onStart();
        mCurrentLocale = getResources().getConfiguration().locale;
    }
    @Override
    protected void onRestart() {
        super.onRestart();
        Locale locale = getLocale(this);
        if (!locale.equals(mCurrentLocale)) {
            mCurrentLocale = locale;
            recreate();
        }
    }
    public static Locale getLocale(Context context){
        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
        String lang = sharedPreferences.getString("language", "en");
        switch (lang) {
            case "English":
                lang = "en";
                break;
            case "Spanish":
                lang = "es";
                break;
        }
        return new Locale(lang);
    }
}
public class App extends Application {
    @Override
    public void onCreate() {
        super.onCreate();
        setLocale();
    }
    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        setLocale();
    }
    private void setLocale() {
        final Resources resources = getResources();
        final Configuration configuration = resources.getConfiguration();
        final Locale locale = getLocale(this);
        if (!configuration.locale.equals(locale)) {
            configuration.setLocale(locale);
            resources.updateConfiguration(configuration, null);
        }
    }
}
}}}


# Supporting seperate layout for differnt devices.
Sometime it's required to have multiple layout of the UI for phone or tablet. We can easilty do that by spacifying mutple layout file. We can alos spacify multiple dimention files to spacidify differnet weidth of the buttons for phone and tablet.

Step1: We can have two diffetnt layoyt for phone and 7 each tablet in res/layout/main_activity.xml    and res/layout-sw600dp/main_activity.xml(600dp or bigger).
{{{

}}}
Table: Topical screen size:
320dp   # a typical phone screen (240x320 ldpi, 320x480 mdpi, 480x800 hdpi, etc). 4 inch phone
480dp   # a large phone screen ~5" (480x800 mdpi). 5 inch phone
600dp   # a small 7” tablet (600x1024 mdpi).
720dp   # a 10” Larget tablet (720x1280 mdpi, 800x1280 mdpi, etc).
840dp   # larget tablet
960dp   # Very large tablet
1280dp  # large
1440dp  # large
1600dp  # large
1920dp  # Extra large

Table: Which file to store what?
res/layout/main_activity.xml                # For handsets (smaller than 600dp available width)
res/layout-w600dp/main_activity.xml         # For 7” tablets or any screen with 600dp
res/layout/main_activity.xml                # For handsets
res/layout-land/main_activity.xml           # For handsets in landscape
res/layout-sw600dp/main_activity.xml        # For 7” tablets
res/layout-sw600dp-land/main_activity.xml   # For 7” tablets in landscape
res/layout/main_activity.xml           # For handsets (smaller than 640dp x 480dp)
res/layout-large/main_activity.xml     # For small tablets (640dp x 480dp and bigger)
res/layout-xlarge/main_activity.xml    # For large tablets (960dp x 720dp and bigger)

You could also use layout alias. It can be defined all files inside layout, however, we can distrigushed the by having differnet values file.
{{{
res/layout/main.xml            # single-pane layout
res/layout/main_twopanes.xml   # two-pane layout

And add these two files:
res/values-large/layout.xml:
<resources>
    <item name="main" type="layout">@layout/main_twopanes</item>
</resources>

res/values-sw600dp/layout.xml:
<resources>
    <item name="main" type="layout">@layout/main_twopanes</item>
</resources>
}}}


# Supporting different button width for diffent devices.
You must understand the diff betwen dip and sp. Yhen you specify spacing between two views, use dp and When specifying text size, always use sp:
{{{
<Button android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="@string/clickme"
    android:layout_marginTop="20dp" />


<TextView android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:textSize="20sp" />
}}}

For example, You have a button view and You would like to have multiple dimention for this button for multiple devices. How to do that? Let's creates values folders and a dimens files in each folder. Based on your requirement you can give padding or any dimen values. As you  given, you should give same name for dimen in all the folders. Android will  automatically pick the dimen value based on your screen size.
{{{
<textView
  android:padding="@dimen/padding_1
  />

values/dimens.xml
<dimen name="padding_1">5dp</dimen>

values-sw360dp/dimens.xml
<dimen name="padding_1">5dp</dimen>

values-sw480dp/dimens.xml
<dimen name="padding_1">8dp</dimen>

values-sw600dp/dimens.xml
<dimen name="padding_1">10dp</dimen>

values-sw720dp/dminen.xml
<dimen name="padding_1">13dp</dimen>

}}}

# Supporting multiple images
When you want to use image, you must provides the below variabtion:
{{{
res/
  drawable-xxxhdpi/
    awesome-image.png
  drawable-xxhdpi/
    awesome-image.png
  drawable-xhdpi/
    awesome-image.png
  drawable-hdpi/
    awesome-image.png
  drawable-mdpi/
    awesome-image.png
}}}
Table: This table is showing image size of each
36x36 # (0.75x) for low-density (ldpi)
48x48 # (1.0x baseline) for medium-density (mdpi)
72x72 # (1.5x) for high-density (hdpi)
96x96 # (2.0x) for extra-high-density (xhdpi)
144x144 # (3.0x) for extra-extra-high-density (xxhdpi)
192x192 # (4.0x) for extra-extra-extra-high-density (xxxhdpi)

## Android Networking

Table: Summary of Android Networking supports
Accessing HTTP               # using okhttp3
Accessing WebSocket          # using okHTTP3 agains
HTTP srever                  # We will show an example how to create HTTP server inside andorid app and from outside app.

# Connecting websocket
 WebSocket providing full-duplex communication channels over a single TCP connection. It is supported in HTML 5. Since the version 3.5 of the OkHttp library, you can also use WebSockets connection in your Android applications. Let's try to use it.
{{{
Step1: Add Dependency
compile 'com.squareup.okhttp3:okhttp:3.6.0'
}}}
Step2: 
package in.co.dipankar.quickandorid.utils;

{{{
package in.co.dipankar.quickandorid.utils;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.WebSocket;
import okhttp3.WebSocketListener;
import okio.ByteString;

public class WSUtils {

    private String mUrl;
    private OkHttpClient mClient;
    public interface Callback{
        public void onConnected();
        public void onDisconnected();
        public void onMessage(String message);
        public void onError();
    }
    private  WebSocket mWebSocket;
    private Callback mCallback;

    public  WSUtils(String url, Callback callback){
        mUrl = url;
        mCallback = callback;
        init();
    }
    private void init(){
        mClient = new OkHttpClient();
        Request request = new Request.Builder().url(mUrl).build();
        WebSocket ws = mClient.newWebSocket(request, new WebSocketListener() {
            @Override
            public void onOpen(WebSocket webSocket, Response response) {
                super.onOpen(webSocket, response);
                mCallback.onConnected();
                mWebSocket = webSocket;
            }

            @Override
            public void onMessage(WebSocket webSocket, String text) {
                super.onMessage(webSocket, text);
                mCallback.onMessage(text);
            }

            @Override
            public void onMessage(WebSocket webSocket, ByteString bytes) {
                super.onMessage(webSocket, bytes);
                mCallback.onMessage(bytes.toString());
            }

            @Override
            public void onClosing(WebSocket webSocket, int code, String reason) {
                super.onClosing(webSocket, code, reason);
                mWebSocket.close(1, null);
                mWebSocket = null;
            }

            @Override
            public void onClosed(WebSocket webSocket, int code, String reason) {
                super.onClosed(webSocket, code, reason);
                mCallback.onDisconnected();
            }

            @Override
            public void onFailure(WebSocket webSocket, Throwable t, Response response) {
                super.onFailure(webSocket, t, response);
                mCallback.onError();
            }
        });

    }

    public boolean sendMessage(String message){
        if(mWebSocket != null){
            mWebSocket.send(message);
            return true;
        } else {
            mCallback.onError();
            return false;
        }
    }

    public boolean connect(){
        return true;
    }
    public boolean disconnect(){
        if(mWebSocket != null){
            mClient.dispatcher().executorService().shutdown();
            return true;
        } else{
            return false;
        }
    }
}
}}}

Step 3: Here is how it can be used form your activity:
{{{
private void testWebSocket() {
    WSUtils ws = new WSUtils("ws://echo.websocket.org", new WSUtils.Callback(){

        @Override
        public void onConnected() {
            DLog.e("WS onConnected");
        }

        @Override
        public void onDisconnected() {
            DLog.e("WS onDisconnected");
        }

        @Override
        public void onMessage(String message) {
            DLog.e("WS onMessage");
        }

        @Override
        public void onError() {
            DLog.e("WS onError");
        }
    });
    ws.sendMessage("Hello");
    ws.disconnect();
}
}}}

# Simple Network Calls to parse JSON.
Similar to web socket, we can have our simple network Module to send web request as given as example.
{{{
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
}}}

Step2: Now you have some simple Utils class like this:
{{{
package in.co.dipankar.quickandorid.utils;


import org.json.JSONObject;

import java.io.IOException;
import java.util.Map;

import okhttp3.Call;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class HTTPUtils {

    public interface  Callback{
        public void onBeforeSend();
        public void onSuccess(JSONObject obj);
        public void onError(String msg);
    }
    private  OkHttpClient mClient;
    public HTTPUtils(){
        mClient = new OkHttpClient();
    }

    public boolean get(String url, final Callback callback){
        Request request = new Request.Builder()
                .url(url)
                .get()
                .build();
        callback.onBeforeSend();
        mClient.newCall(request).enqueue( new okhttp3.Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                if(callback != null) {
                    callback.onError("Internal error:" + e.getMessage());
                }
            }
            @Override
            public void onResponse(Call call, Response response) throws IOException {
                if (callback != null) {
                    try {
                        String jsonData = response.body().string();
                        JSONObject Jobject = new JSONObject(jsonData);
                        callback.onSuccess(Jobject);
                    } catch (Exception e) {
                        e.printStackTrace();
                        callback.onError(
                                "Internal error happened while parsing the json object");
                    }
                }
            }
        });
        return true;
    }

    public boolean post(String url, Map<String, String> data, final  Callback callback){
        JSONObject json = new JSONObject();
        if(data!= null) {
            try {
                for (Map.Entry<String, String> entry : data.entrySet()) {
                    json.put(entry.getKey(), entry.getValue());
                }
            } catch (Exception e) {
                e.printStackTrace();
                return false;
            }
        }
        MediaType JSON = MediaType.parse("application/json; charset=utf-8");
        RequestBody body = RequestBody.create(JSON, json.toString());
        callback.onBeforeSend();
        Request request = new Request.Builder().url(url).post(body).build();
        mClient.newCall(request).enqueue(new okhttp3.Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                if (callback != null) {
                    callback.onError(e.toString());
                }
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                if (callback != null) {
                    try {
                        String jsonData = response.body().string();
                        JSONObject Jobject = new JSONObject(jsonData);
                        callback.onSuccess(Jobject);
                    } catch (Exception e) {
                        e.printStackTrace();
                        callback.onError("Internal error happened while parsing the json object");
                    }
                }
            }
        });
        return true;
    }
}
}}}

Step3: He is how you can call thease utils from your android Activity or from whatever you want:
{{{
    private void testHTTPUtils() {
        HTTPUtils httpUtils = new HTTPUtils();
        httpUtils.get("http://simplestore.dipankar.co.in/api/test", new HTTPUtils.Callback() {
            @Override
            public void onBeforeSend() {
                DLog.e("HTTPUtils onBeforeSend");
            }

            @Override
            public void onSuccess(JSONObject obj)  {
                try {
                    DLog.e("HTTPUtils onSuccess"+obj.getString("status"));
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onError(String msg) {
                DLog.e("HTTPUtils onError");
            }
        });

        Map<String, String> data = new HashMap<>();
        data.put("name", "dipankar");
        httpUtils.post("http://simplestore.dipankar.co.in/api/test", data, new HTTPUtils.Callback() {
            @Override
            public void onBeforeSend() {
                DLog.e("HTTPUtils onBeforeSend");
            }

            @Override
            public void onSuccess(JSONObject obj)  {
                try {
                    DLog.e("HTTPUtils onSuccess"+obj.getString("status"));
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onError(String msg) {
                DLog.e("HTTPUtils onError");
            }
        });
    }
}}}
Synchronous Get
{{{
    OkHttpClient client = new OkHttpClient();
Request request = new Request.Builder()
  .url("http://www.ssaurel.com/tmp/toto.txt")
  .build();
Response response = client.newCall(request).execute();
if (!response.isSuccessful()) {
  // manage error
  Log.e("Unexpected code " + response);
  return;
}
Headers responseHeaders = response.headers();
// show response headers
for (int i = 0; i < responseHeaders.size(); i++) {
  Log.i(responseHeaders.name(i) + ": " + responseHeaders.value(i));
}
// show body content
Log.i(response.body().string());
}}}

Aync Get Request 
{{{
    OkHttpClient client = new OkHttpClient();
Request request = new Request.Builder()
  .url("http://www.ssaurel.com/tmp/toto.txt")
  .build();
client.newCall(request).enqueue(new Callback() {
  @Override public void onFailure(Call call, IOException e) {
    // manage failure !
  }
  @Override public void onResponse(Call call, Response response) throws IOException {
    if (!response.isSuccessful()) {
      // manage error
      Log.e("Unexpected code " + response);
      return;
    }
    Headers responseHeaders = response.headers();
    // show response headers
    for (int i = 0; i < responseHeaders.size(); i++) {
      Log.i(responseHeaders.name(i) + ": " + responseHeaders.value(i));
    }
    // show body content
    Log.i(response.body().string());
  }
});
}}}

Accessing headers
{{{
    private final OkHttpClient client = new OkHttpClient();

  public void run() throws Exception {
    Request request = new Request.Builder()
        .url("https://api.github.com/repos/square/okhttp/issues")
        .header("User-Agent", "OkHttp Headers.java")
        .addHeader("Accept", "application/json; q=0.5")
        .addHeader("Accept", "application/vnd.github.v3+json")
        .build();

    try (Response response = client.newCall(request).execute()) {
      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);

      System.out.println("Server: " + response.header("Server"));
      System.out.println("Date: " + response.header("Date"));
      System.out.println("Vary: " + response.headers("Vary"));
    }
  }
}}}
POST jSON Request 
{{{
public static final MediaType JSON
= MediaType.parse("application/json; charset=utf-8");
OkHttpClient client = new OkHttpClient();
String url = "http://www.ssaurel.com/tmp/jsonService";
String json = "{'mode' : 'test'}"; // Json Content ...
RequestBody body = RequestBody.create(JSON, json);
Request request = new Request.Builder()
  .url(url)
  .post(body)
  .build();
Response response = client.newCall(request).enqueue(new Callback() {
  @Override public void onFailure(Call call, IOException e) {
    // manage failure
  }
  @Override public void onResponse(Call call, Response response) throws IOException {
    // Manage response
    Log.i(response.body().string());
  }
});
}}}

Posting a file 
{{{
ublic static final MediaType MEDIA_TYPE_MARKDOWN
      = MediaType.parse("text/x-markdown; charset=utf-8");

  private final OkHttpClient client = new OkHttpClient();

  public void run() throws Exception {
    File file = new File("README.md");

    Request request = new Request.Builder()
        .url("https://api.github.com/markdown/raw")
        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))
        .build();

    try (Response response = client.newCall(request).execute()) {
      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);

      System.out.println(response.body().string());
    }
  }
}}}

Post Request with form params
{{{
    private final OkHttpClient client = new OkHttpClient();

  public void run() throws Exception {
    RequestBody formBody = new FormBody.Builder()
        .add("search", "Jurassic Park")
        .build();
    Request request = new Request.Builder()
        .url("https://en.wikipedia.org/w/index.php")
        .post(formBody)
        .build();

    try (Response response = client.newCall(request).execute()) {
      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);

      System.out.println(response.body().string());
    }
  }
}}}

OKHTTP Cacheing
{{{
    int cacheSize = 10 * 1024 * 1024; // 10MB
OkHttpClient.Builder builder = new OkHttpClient.Builder()
        .cache(new Cache(context.getCacheDir(), cacheSize)
        ....

new Request.Builder().cacheControl(CacheControl.FORCE_CACHE)
    ...;

}}}

Handing Timeouts for all calls
{{{
    private final OkHttpClient client;

  public ConfigureTimeouts() throws Exception {
    client = new OkHttpClient.Builder()
        .connectTimeout(10, TimeUnit.SECONDS)
        .writeTimeout(10, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();
  }

  public void run() throws Exception {
    Request request = new Request.Builder()
        .url("http://httpbin.org/delay/2") // This URL is served with a 2 second delay.
        .build();

    try (Response response = client.newCall(request).execute()) {
      System.out.println("Response completed: " + response);
    }
  }
}}}

Handing Timeouts for each call
{{{
    private final OkHttpClient client = new OkHttpClient();

  public void run() throws Exception {
    Request request = new Request.Builder()
        .url("http://httpbin.org/delay/1") // This URL is served with a 1 second delay.
        .build();

    // Copy to customize OkHttp for this request.
    OkHttpClient client1 = client.newBuilder()
        .readTimeout(500, TimeUnit.MILLISECONDS)
        .build();
    try (Response response = client1.newCall(request).execute()) {
      System.out.println("Response 1 succeeded: " + response);
    } catch (IOException e) {
      System.out.println("Response 1 failed: " + e);
    }

    // Copy to customize OkHttp for this request.
    OkHttpClient client2 = client.newBuilder()
        .readTimeout(3000, TimeUnit.MILLISECONDS)
        .build();
    try (Response response = client2.newCall(request).execute()) {
      System.out.println("Response 2 succeeded: " + response);
    } catch (IOException e) {
      System.out.println("Response 2 failed: " + e);
    }
  }
}}}

# Having HTTP server inside android App

Step1: Add Dependency
{{{
    compile 'org.nanohttpd:nanohttpd:2.2.0'
}}}
Write your own Server Utils
{{{
package in.co.dipankar.quickandorid.utils;

import org.json.JSONObject;

import java.io.IOException;
import java.util.Map;
import fi.iki.elonen.NanoHTTPD;

public class HttpdUtils extends NanoHTTPD {
    public interface Result{
        public String getStatus();
        public String getData();
    }

    public interface Callback{
        public Result Handle(String key);
        public void onSuccess(String msg);
        public void onError(String msg);
    }

    private Callback mCallback;
    public HttpdUtils(Callback callback) {
        super(8081);
        mCallback = callback;
        this.start();
    }

    @Override public Response serve(IHTTPSession session) {
        Method method = session.getMethod();
        String uri = session.getUri();
        System.out.println(method + " '" + uri + "' ");
        Result result = mCallback.Handle(uri);

        return NanoHTTPD.newFixedLengthResponse(result.getData());
    }

    @Override
    public void start(){
        try {
            super.start();
            mCallback.onSuccess("started");
        } catch (IOException e) {
            e.printStackTrace();
            mCallback.onError("Not able start");
        }
    }

    @Override
    public void stop(){
        super.stop();
        mCallback.onSuccess("stoped");
    }
}
}}}
Now when you start your app the server will start
Is my server is runing : 
{{{
$ adb shell
$ generic_x86:/ # lsof  -l | grep 8081 
kandroide 24907      10088   54u     IPv6                          0t0    1569923 TCP []:8081->[]:0 (LISTEN) 
}}}
Now connect it from your host and Hit the BOX
{{{
$ adb forward tcp:8081 tcp:8081
$ curl http://localhost:8081/gsf
}}}

With this infra, we can build our own App Automation and App helper to execute any code for debugging, Let's consider the below Remote Debugger which allows us to set and get the Pref from your laptop.
{{{
    package in.co.dipankar.quickandorid.utils;

import android.content.Context;
import android.content.SharedPreferences;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import static android.content.Context.MODE_PRIVATE;

public class RemoteDebug {
    private HttpdUtils mHttpdUtils;
    private Context mContext;

    public RemoteDebug(Context context){
        mContext = context;
        mHttpdUtils = new HttpdUtils(8081, new HttpdUtils.Callback() {
            @Override
            public String Handle(String method, String key, Map<String, String> param) {
                String data = param.get("data");
                switch (key){
                    case "/setPref":
                        return setPerf(data);
                    case "/getPref":
                        return getPerf(data);
                    default:
                        return "Invalid command Sent!\n";

                }
            }
            @Override
            public void onSuccess(String msg) {}

            @Override
            public void onError(String msg) {}
        });
    }
    private String setPerf(String data){
        if(data == null || data.length() < 1){
            return "Please pass some args\n";
        }
        List<String> tokens = Arrays.asList(data.split(" "));
        if(tokens.size() < 3){
            return "Less args sent";
        }
        SharedPreferences.Editor editor = mContext.getSharedPreferences("test", MODE_PRIVATE).edit();
        switch(tokens.get(0)){
            case "S":
                editor.putString(tokens.get(1), tokens.get(2));
                editor.apply();
                return "Set Successfully";
            case "I":
                editor.putInt(tokens.get(1), Integer.parseInt(tokens.get(2)));
                editor.apply();
                return "Set Successfully";

        }
        return "Not able to set the shared pref";
    }
    private String getPerf(String data){
        if(data == null || data.length() < 1){
            return "Please send some args\n";
        }
        List<String> tokens = Arrays.asList(data.split(" "));
        if(tokens.size() < 2){
            return "Less args sent";
        }
        SharedPreferences prefs = mContext.getSharedPreferences("test", MODE_PRIVATE);

        switch(tokens.get(0)){
            case "S":
                return prefs.getString(tokens.get(1),"null");
            case "I":
                int x =  prefs.getInt(tokens.get(1),-1);
                return x+"";

        }
        return "Not able to get the shared pref";
    }
}

}}}

From Activity, You needs to initilized this:
{{{
    private void testRemoteDebuging() {
    RemoteDebug remoteDebug = new RemoteDebug(this);
}
}}}

Ans how it can be used:
{{{
dip-pro:books dip$ curl http://localhost:8081/getPref?data=I%20me%2010
10
dip-pro:books dip$ curl http://localhost:8081/setPref?data=I%20me%20100
Set Successfully
dip-pro:books dip$ curl http://localhost:8081/getPref?data=I%20me%2010
100
dip-pro:books dip$ curl http://localhost:8081/getPref?data=I%20me%2010
100
dip-pro:books dip$ curl http://localhost:8081/setPref?data=I%20me%20100
Set Successfully
dip-pro:books dip$ 
}}}


## Android Thread and process

# Application SandBox 
Android application are mainly sandboxed. They are executed in it's own process and have their secure storage area. Every application has it's own Application to UserID mappaing , assigned by the android system while installation.

# interprocess communication:

Table: Way to to interprocess communication.
Unix IPC  # Not suited from Android.
Network based IPC # Avilable under android but not efficent.
Intent # Generic, extensible message. They contains “addressable” content (Action, category) and Android delivers appropriately. They can have Additional payload. Android Efficiently “routed” between apps which make sApps can become like plug-ins they can be used to return data possible.
Mesenger # Another way to do IPC. They use Cross process Handler reference. It Sends Message to specific process and Other process must support this.
ContentResolver # Mainly Storage centric IPC,  Used to interface with ContentProvider. it Supports standard SQL type operations like Insert, Delete, Query and also Support custom method calls
IBinder and Binder Object # This is Base IPC mechanism in Android and Other IPC mechanism layered on top. It Leverages Android specific kernel feature like Shared memory between processes It Uses a special serialized data format which Serialized data via Parcel, Supports any object implementing Parcelable - Non-permanent serial form of data. It Can define custom interfaces or methods. It is Used by internal framework Services. This is the bast to acive Cross-process method calls. It required defing AIDL. 


# Sharing private data, resource and processes by multiple app.
What if I need something different? Is there a way to get re-use and access existing data? Is there a way to get better efficiency? Yes it is possible.

Table: Effective way of sharing across apps.
The Almost-Unique User ID # We know the Unique User ID is assigned app at install time. However, we can override it in menufest by pspacifying  android:sharedUserId="com.example.sharedId">. Shared ID is a string and Not the real user ID! but anndoid system lookup for this string to assign unique user id. We also needs to sign the app using same certificate to avoid security concern. advantage of Shared User ID :  access other app data like Files, Resources and SharedPreferences, Howvery they are not RAM efficient as both process needs to be loaded. Another concern is access other app data is hard.
Sharing Proces   # Allow sharing process  by having <application android:process = "dipnkar.example.sharedProcess">. Startwith‘:’forprivateprocessinapp and Star twith a lower case character for global(sharable). It must share user ID. 

Table: advantage of Process sharing:
Reduced IPC: IBinder # IBinder is efficient, right? Yes, but is still cross-process Memory still has to be marshalled. Process context switch. But IBinder is smart, process aware, As they know two app running on the same process they calls target interface directly which reduce context switch and memoery marshalling.
Reduced IPC: ContentProvider # It Meant for exposing storage schema globally and it is Process aware which helps Reduced memory usage and Reduced context switching.

# Android Threads.
In this section we will discuss concurrenact vis android thread.
1. Android == Concurrency -
2. unresponsive UI thread and ANR demo: The UI unresposive happens when app fail to respond to user input after timeout ( 5 sec) or BroadcastReceiver fails to complete after timeout( 10 sec) or  app in  a Critical error state. We will give a demo of unresponsive.
3. Main thraed( UI thread)- UI thread is central to app. All the compoents like- Activity, Service and BroadcastReceive runs on UI thread. 

Table: Top ways to having backgroud operations:
Option1 :Thread/Looper/Handler comibination # Thread class, defined by Java, Executes a specific Runnable and it is the Base class for other threading options. It is Primitive, not hooked into framework. It is a Single invocation ( that means will do one task and then terminates), can be long running. Looper bound to a specific Thread instance. Looper waits for Message objects and Looper hands Message objects to Handler. We can create hanlder by Extend Handler or provide Handler.Callback. It Used for well-defined interfaces like handling Message contents or Can execute Runnables in Handler. This is also Not directly tied to framework states.
Option 2: HandlerThread # Simplified Thread/Looper/Handler construct by andorid. It Automatically creates Thread and Looper . Can hook when Looper initialized - Extend the class, provide onLooperPrepared() It is also Single invocation ( Can be used once), can be long running.
Option 3: AsyncTask # Automatically handles coordination with UI thread and perfact for  Short lived operations. It has Restrictions on creation, execution. It's Operations changed with Android versions( very bad). Originally serially executed on background thread, then Donut used parallel execution and breaks a lot of apps. then Honeycomb reverted to serial execution but support parranl ops whihc Can be overridden using executeOnExecutorwith THREAD_POOL_EXECUTOR it is Single invocation only. But is Easy to leak resource and should be taken care properly.
Option 4: Thread Pools #  Extensible framework for offloading like Longer running tasks which supports Parallel/serial operations. It is Efficient thread usage via re-use It alos support different policies for cancel, reject. We can also se pool size.
Option 5: Native C++ Threads# C/C++ accessible via Java which Requires the Android NDK and  Requires JNI. We can have Two options available (1) Threads in Java, access native methods or (2) Native pthreads behind the scenes. It is Very flexible, super high performance and No built-in framework coordination.







Table: Android Ways to post a Job to UI Threass
Activity.runOnUiThread(Runnable) # Post a job from avcativity.
View.post(Runnable)              # Post a runnable when you have soem async job in View.
View.postDelayed(Runnable, long) # Post a Job with a delay.
Handler + myRunnable    # With 

Table: Working on a sparate threads
Java Thread(Runnable)                # Java Thread
Android AsyncTask  # It performs the blocking operations in a worker thread and then publishes the results on the UI thread, without requiring you to handle threads and/or handlers yourself.
Android Hanlder + Lopper                       # Android Hanlder
Android HandlerThread # Hanlder and Looper Combo.
Android IntentService            # Andorid IntentSrevices
Android Loader                   # Andorid Apis
Android JobScheduler             # Andorid Jobs
Android GcmNetworkManager        # Andorid APIS
Android AlarmManager              # Android Alerm to setup Jobs
Java Executor/Thread Pool     # Java Spacific
Java FutureTask                   # Java APIS
Android CountDownTimer       # Android API
Java Timer                   # Java APIs
Java ScheduledThreadPoolExecutor  # Java APIs

Using Java Threads: Post a Job in backgroud thread and when it is done post the result in UI- Unfortunately, these classes and methods also tend to make your code more complicated and more difficult to read. 
{{{
    public void onClick(View v) {
  new Thread(new Runnable() {
    public void run() {
      final Bitmap b = loadImageFromNetwork();
      mImageView.post(new Runnable() {
        public void run() {
          mImageView.setImageBitmap(b);
        }
      });
    }
  }).start();
}
}}}

Using Async Task: Perhaps the best known of the asynchronous API, AsyncTask is easy to implement and returns results on the main thread
- You can specify the type, using generics, of the parameters, the progress values and the final value of the task
- The method doInBackground() executes automatically on a worker thread
onPreExecute(), onPostExecute() and onProgressUpdate() are all invoked on the UI thread
- The value returned by doInBackground() is sent to onPostExecute()
You can call publishProgress() at anytime in doInBackground() to execute onProgressUpdate() on the UI thread
- You can cancel the task at any time, from any thread
{{{
    public void onClick(View v) {
  new DownloadImageTask().execute("http://example.com/image.png");
}

private class DownloadImageTask extends AsyncTask {
     protected Bitmap doInBackground(String... urls) {
         return loadImageFromNetwork(urls[0]);
     }

     protected void onPostExecute(Bitmap result) {
         mImageView.setImageBitmap(result);
     }
}
}}}

Anotehr example;
{{{
    new AsyncTask<URL, Integer, Long>() {
     protected Long doInBackground(URL... urls) {
         int count = urls.length;
         long totalSize = 0;
         for (int i = 0; i < count; i++) {
             totalSize += Downloader.downloadFile(urls[i]);
             publishProgress((int) ((i / (float) count) * 100));
             // Escape early if cancel() is called 
             if (isCancelled()) break;
         } 
         return totalSize;
     } 
 
     protected void onProgressUpdate(Integer... progress) {
         setProgressPercent(progress[0]);
     } 
 
     protected void onPostExecute(Long result) {
         showDialog("Downloaded " + result + " bytes");
     } 
 }.execute(url1, url2, url3);
}}}
 There are some issues with AsyncTask, for example, they are not aware of the activity or fragment lifecycle and so it is the programmer's responsibility to handle the AsyncTasks behaviour when the activity is destroyed. This means that they are not the best option for long running operations and also, if the app is in the background and the app is terminated by Android, your background processing is also terminated.

IntentService: This is the defacto choice for long running processing on Android, a good example would be to upload or download large files. The upload and download may continue even if the user exits the app and you certainly do not want to block the user from being able to use the app while these tasks are going on.
{{{
public class RSSPullService extends IntentService {
    @Override 
    protected void onHandleIntent(Intent workIntent) {
        // Gets data from the incoming Intent 
        String dataString = workIntent.getDataString();
        ... 
        // Do work here, based on the contents of dataString 
        ... 
    } 
}
    // AndroidManifest.xml
    <application
        android:icon="@drawable/icon"
        android:label="@string/app_name">
        ...
        <!--
        Because android:exported is set to "false",
        the service is only available to this app.
        -->
        <service
            android:name=".RSSPullService"
            android:exported="false"/>
        ...
    <application/>
}}}
Loader: Loaders are a complex topic, any single implementation of Loaders probably deserved a post all for itself. For now it would be worth pointing out that Loaders were introduced in Android Honeycomb and are part of the compatibility library.


JobScheduler: JobScheduler is the Android framework API for scheduling tasks or work. It first became available in Android. JobScheduler is implemented in the platform, which allows it to collect information about jobs that need to run across all apps. This information is used to schedule jobs to run at, or around, the same time. Batching job execution in this fashion allows the device to enter and stay in sleep states longer, preserving battery life.
{{{
// Step1:
public class JobSchedulerService extends JobService {
    @Override
    public boolean onStartJob(JobParameters params) {
        return false;
    }
    @Override
    public boolean onStopJob(JobParameters params) {
        return false;
    }
}
[more] https://code.tutsplus.com/tutorials/using-the-jobscheduler-api-on-android-lollipop--cms-23562
}}}

AlarmManager: The AlarmManager API is another option that the framework provides for scheduling tasks. This API is useful in cases in which an app needs to post a notification or set off an alarm at a very specific time.

Firebase JobDispatcher: Firebase JobDispatcher is an open-source library that provides an API similar to JobScheduler in the Android platform. Firebase JobDispatcher serves as a JobScheduler-compatibility layer for apps targeting versions of Android lower than 5.0.

GcmNetworkManager: It allow to do Schedule tasks and chedule a one-off task when network is connected.
{{{
mGcmNetworkManager = GcmNetworkManager.getInstance(this);
//Schedule a one-off task when network is connected
OneoffTask task = new OneoffTask.Builder()
        .setService(MyTaskService.class)
        .setTag(TASK_TAG_WIFI)
        .setExecutionWindow(0L, 3600L)
        .setRequiredNetwork(Task.NETWORK_STATE_UNMETERED)
        .build();

mGcmNetworkManager.schedule(task);
/// Schedule a periodic task
PeriodicTask task = new PeriodicTask.Builder()
        .setService(MyTaskService.class)
        .setTag(TASK_TAG_PERIODIC)
        .setPeriod(30L)
        .build();

mGcmNetworkManager.schedule(task);

// Schedule a persistent task
adb shell dumpsys activity service GcmService --endpoints YOUR_ENDPOINT

}}}

CountDownTimer:
{{{
    new CountDownTimer() {
    		@Override
    		public void onFinish() {
    		}
@Override
    		public void onTick(long millisUntilFinished) {
    		}
	}.start();
}}}

Looper, Handler, and HandlerThread:   Java threads are one-time use only and die after executing its run method.To ensure, thread reusability, the thread should  kept alive, in a loop via it’s run() method.The task is executed serially by that thread and is maintained in a queue (MessageQueue).Then, thread must be terminated when done. The above model is implemented in the Android via Looper, Handler, and HandlerThread
- MessageQueue is a queue that has tasks called messages which should be processed.
- Handler enqueues task in the MessageQueue using Looper and also executes them when the task comes out of the MessageQueue.
- Looper is a worker that keeps a thread alive, loops through MessageQueue and sends messages to the corresponding handler to process.
- Finally Thread gets terminated by calling Looper’s quit() method.

An sample example of looper thread is as below:
{{{
    class LooperThread extends Thread {
      public Handler mHandler; 
      public void run() { 
          Looper.prepare();
          mHandler = new Handler() { 
              public void handleMessage(Message msg) { 
                 // process incoming messages here
                 // this will run in non-ui/background thread
              } 
          }; 

          Looper.loop();
      } 
  }
}}}


FutureTask: FutureTask performs asynchronous processing, however, if the result is not ready yet or processing has not complete, calling get() will be block the thread.

{{{
RequestFuture<JSONObject> future = RequestFuture.newFuture();
JsonObjectRequest request = new JsonObjectRequest(URL, null, future, future);
requestQueue.add(request);

try { 
  JSONObject response = future.get(); // this will block (forever)
} catch (InterruptedException e) {
  // exception handling 
} catch (ExecutionException e) {
  // exception handling 
}
}}}

Java Timer : An example of using Java Timer to do something after 5 seconds. These can be used to schedule some processing on a background thread. There are other ways to handle the same in Android, you could use a Handler with 
{{{
Timer timer = new Timer();
timer.schedule(new TimerTask(){
  public void run() {
    // time ran out.
    timer.cancel(); 
  }
}, 5000);
}}}

ScheduledThreadPoolExecutor: A ThreadPoolExecutor that can additionally schedule commands to run after a given delay, or to execute periodically. This class is preferable to Timer when multiple worker threads are needed, or when the additional flexibility or capabilities of ThreadPoolExecutor (which this class extends) are required. Delayed tasks execute no sooner than they are enabled, but without any real-time guarantees about when, after they are enabled, they will commence. Tasks scheduled for exactly the same execution time are enabled in first-in-first-out (FIFO) order of submission.
The ScheduledThreadPoolExecutor suffers from a lot of the same problems on Android as Timer and Java Threads. If you need to update the UI you’ll need to use a Handler to post messages to the UI thread or pass in a Listener. A ScheduledThreadPoolExecutor is part of Java, it’s not aware of the Activity or Fragment lifecycle and as such any Listeners will have to be cleaned up or replaced manually in order to prevent memory leaks.
{{{
public class CustomScheduledExecutor extends ScheduledThreadPoolExecutor {
   static class CustomTask<V> implements RunnableScheduledFuture<V> { ... }
   protected <V> RunnableScheduledFuture<V> decorateTask(
                Runnable r, RunnableScheduledFuture<V> task) {
       return new CustomTask<V>(r, task);
   }
   protected <V> RunnableScheduledFuture<V> decorateTask(
                Callable<V> c, RunnableScheduledFuture<V> task) {
       return new CustomTask<V>(c, task);
   }
   // ... add constructors, etc.
 }
// Code from Java API
}}}

Example1: In service, We have created thread(s) for doing some background task. Now, thread need to post certain task on main thread's(UI) message queue, for example a Runnable. Here is way to access from a worker thread in a service
{{{
Case 1. If your background thread has a reference to a Context object, Get a handler that can be used to post to the main thread
Handler mainHandler = new Handler(context.getMainLooper());
Runnable myRunnable = new Runnable() {
    @Override 
    public void run() {....} // This is your code
};
mainHandler.post(myRunnable);

Case 2. If your background thread does not have (or need) a Context object, Get a handler that can be used to post to the main thread
Handler mainHandler = new Handler(Looper.getMainLooper());
Runnable myRunnable = new Runnable() {
    @Override 
    public void run() {....} // This is your code
};
mainHandler.post(myRunnable);

Case 3. Simple:
new Handler(Looper.getMainLooper()).post(mYourUiThreadRunnable);
}}}


Example: Example of an Generic Thread Utils class:
{{{
import android.os.Handler;
import android.os.Looper;

public interface ThreadUtil {
  boolean isUiThread();
  void runOnUiThread(Runnable runnable);
  void postToUiThread(Runnable runnable);
  void postToUiThread(Runnable runnable, long delayMs);

  public void postToCurrentThread(Runnable runnable) ;
  public void postToCurrentThread(Runnable runnable, long delayMs);

  public void sleep(long timeMillis);
}

public class MyThreadUtil implements ThreadUtil {
  private static final MyThreadUtil INSTANCE = new MyThreadUtil();
    private static final Thread MAIN_THREAD = Looper.getMainLooper().getThread();
  private Handler mUiThreadHandler;
  private MyThreadUtil() {
    mUiThreadHandler = new Handler(Looper.getMainLooper());
  }

  @Override
  public boolean isUiThread() {
    return MAIN_THREAD == Thread.currentThread();
  }

  @Override
  public void runOnUiThread(Runnable runnable) {
    if (isUiThread()) {
      runnable.run();
    } else {
      mUiThreadHandler.post(runnable);
    }
  }

  @Override
  public void postToUiThread(Runnable runnable) {
    mUiThreadHandler.post(runnable);
  }

  @Override
  public void postToUiThread(Runnable runnable, long delayMs) {
    mUiThreadHandler.postDelayed(runnable, delayMs);
  }

  public static MyThreadUtil get() {
    return INSTANCE;
  }
  public void postToCurrentHandlerThread(Runnable runnable) {	
    Handler handler = new Handler();	
    handler.post(runnable);	
  }

   @Override	
  public void postToCurrentHandlerThread(Runnable runnable, long delayMs) {	
    Handler handler = new Handler();	
    handler.postDelayed(runnable, delayMs);	
  }

  @Override
  public void sleep(long timeMillis) throws InterruptedException {	
    Thread.sleep(timeMillis);	
  }
}
}}}
## Android Design
In this section, I will discusstion the common design to be followed by :
Table: Android Design Patterns
Spalsh Screen Design  # This will tell how to design First time user Experice
Loading screen Design # How to design loading screen when the app is laucnhed for second time.
Muti-Page App with Activitys # How Design multi-page aplication with mutiple activity.
Multi-Page with Multiple Fragemnts # In this section, we will discuss how to design a app with same activity with mutiple screen
MVP # This section discuss how to decouple UI login with Contrler logic using MVC Patterns
MVVC # Design discussion on MV-VP patatrens

# MVP Patterns in details
The Model View Presenter (MVP) design pattern dictates that you separate your presentation (the View) from the business logic and the data sources (the Presenter and the Model). The design mainly consist of 3 things.
1. Model: it is an interface responsible for managing data.
2. Presenter: the presenter is the middle-man between model and view. The presenter is responsible for querying the model and updating the view, reacting to user interactions updating the model.
3. View: it is only responsible for presenting data in a way decided by the presenter. The view can be implemented by Activities, Fragments, any Android widget.

The correct design of the MVP should be based on below priciples:
1. Make View dumb and passive - that means delegates all evnets to presenter so - if you have a username/password form and a “submit” button, you don’t write the validation logic inside the view but inside the presenter. 
2. Make presenter framework-independent: make sure that presenter doesn’t depend on Android classes but only have Java deps. It gives two advantage : unit test - flexyable.
3. Write a contract to describe the interaction between View and Presenter: describes the communication between view and presenter. It should bundle ViewContracts and Presenter contracts like this.
{{{
public interface SearchRepositoriesContract {
  interface View {
    void addResults(List<Repository> repos);
    void clearResults();
    void showContentLoading();
    void hideContentLoading();
    void showListLoading();
    void hideListLoading();
    void showContentError();
    void hideContentError();
    void showListError();
    void showEmptyResultsView();
    void hideEmptyResultsView();
  }
  interface Presenter extends BasePresenter<View> {
    void load();
    void loadMore();
    void queryChanged(String query);
    void repositoryClick(Repository repo);
  }
}
}}}
4. The presenter must depend on the View interface and not directly on the Activity or the real View..

5. Define a naming convention to separate responsibilities: All Presenter methods should be an actions like Load() , where as all view methods will be userEvents. like queryChanged(), onButtonClick or UI functions like Show/Hide/Render().

6. Do not create Activity-lifecycle-style callbacks in the Presenter interface:  presenter shouldn’t have methods like onCreate(...), onStart(), onResume() as The presenter shouldn’t have a so complex lifecycle.

7. Presenter has a 1-to-1 relation with the view - The presenter doesn’t make sense without a view. It comes with the view and goes when the view is destroyed as It should  manages one and only view. How to pass View to presentre, either pass it by constracter( which is not so good)- better we can have attach(View view) and detach() ( which makes View nullbale and we need to have darty null check everwhere). We can solve the problem using  BasePresenter<V>  as below:
{{{
public interface BasePresenter<V> {
  void attach(V view);
  void detach();
  @Nubbale V getView();
}
}}}
7. Statleless presentre: (a) Do not save the state inside the presenter - as You can’t serialize data into a Bundle because presenter would be coupled with an Android class. Presentre should be stateless. (b)Do not retain the presenter - kill it when app destry and recrate it. (c) Provide a cache for the Model to restore the View state.


In this section, I will discussss to alternative Design for MVP Patterns

Step1: Define contracts.
{{{
public interface Contracts{
    public interface IMainView {
        void showProgress();
        void hideProgress();
        void setItems(List<String> items);
        void showMessage(String message);
    }
    public interface IMainPresenter {
        void onAttach();
        void onItemClicked(int position);
        void onDetach();
    }
    //model
    public interface IItemProvider {
        interface OnFinishedListener {
            void onFinished(List<String> items);
        }
        void loadItems(OnFinishedListener listener);
    }
}
}}}

Step2: Define Concreate implements: Note that:
-  MainPresenter implements IMainPresenter , MainActivity implement IMainView and so on. 
- MainView instancite the Presenter and Model and Pass them both to presneter. (If you use attach or detech - then they should be bind at onViewAttch and OnViewDetacj )
{{{
// implement presentation
public class MainPresenter implements IMainPresenter, IItemProvider.OnFinishedListener {
    private IMainView mainView; <<<< Not that it's an interface.
    private IItemProvider itemProvider;
    public MainPresenter(IMainView mainView, IItemProvider itemProvider) {
        this.mainView = mainView;
        this.itemProvider = itemProvider;
    }

    @Override public void onAttach() {
        if (mainView != null) {
            mainView.showProgress();
        }
        itemProvider.loadItems(this);
    }

    @Override public void onItemClicked(int position) {
        if (mainView != null) {
            mainView.showMessage(String.format("Position %d clicked", position + 1));
        }
    }

    @Override public void onDetach() {
        mainView = null;
    }
    @Override public void onFinished(List<String> items) {
        if (mainView != null) {
            mainView.setItems(items);
            mainView.hideProgress();
        }
    }
    public IMainView getMainView() {
        return mainView;
    }
}

// implement model
public class ItemProvider implements IItemProvider{
    @Override public void loadItems(final IItemProvider.OnFinishedListener listener) {
        new Handler().postDelayed(new Runnable() {
            @Override public void run() {
                listener.onFinished(createArrayList());
            }
        }, 2000);
    }

    private List<String> createArrayList() {
        return Arrays.asList(
                "Item 1",
                "Item 2",
                "Item 3",
                "Item 4",
                "Item 5",
                "Item 6",
                "Item 7",
                "Item 8",
                "Item 9",
                "Item 10"
        );
    }
}

// implement view.
public class MainActivity extends Activity implements IMainView, AdapterView.OnItemClickListener {

    private ListView listView;
    private ProgressBar progressBar;
    private IMainPresenter presenter;

    @Override protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        listView = (ListView) findViewById(R.id.list);
        listView.setOnItemClickListener(this);
        progressBar = (ProgressBar) findViewById(R.id.progress);
        // Presneter created and passes. 
        presenter = new MainPresenter(this, new ItemProvider() {
        
        });
    }

    @Override protected void onResume() {
        super.onResume();
        presenter.onAttach();
    }

    @Override protected void onDestroy() {
        presenter.onDetach();
        super.onDestroy();
    }

    @Override public void showProgress() {
        progressBar.setVisibility(View.VISIBLE);
        listView.setVisibility(View.INVISIBLE);
    }

    @Override public void hideProgress() {
        progressBar.setVisibility(View.INVISIBLE);
        listView.setVisibility(View.VISIBLE);
    }

    @Override public void setItems(List<String> items) {
        listView.setAdapter(new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, items));
    }

    @Override public void showMessage(String message) {
        Toast.makeText(this, message, Toast.LENGTH_LONG).show();
    }

    @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        presenter.onItemClicked(position);
    }
}
}}}


Example 2: This is an alternative way to do that: 

Step 1: Define common Base MVP infra like base presenter and base activity.
{{{e
public interface MvpView {
    void showLoading(String msg);
    void hideLoading();
    void showError(String errorMsg);
}
public interface Presenter<V extends MvpView> {
    void attachView(V mvpView);
    void detachView();
}
public class BasePresenter<V extends MvpView> implements Presenter<V> {
    private V mvpView;
    @Override
    public void attachView(V mvpView) {
        this.mvpView = mvpView;
    }
    @Override
    public void detachView() {
        this.mvpView = null;
    }
    public boolean isViewAttached() {
        return mvpView != null;
    }
    public V getMvpView() {
        return mvpView;
    }

    public void checkViewAttached() {
        if (!isViewAttached()) {
            throw new MvpViewNotAttachedException();
        }
    }

    public static class MvpViewNotAttachedException extends RuntimeException {
        public MvpViewNotAttachedException() {
            super("You must call attachView(MvpView)");
        }
    }
}
}}}

Step2: Now Define your customView and Presenter which deps on the infra.
{{{e
public interface ILoginPresenter {
    public void login();
}

public class LoginPresenter extends BasePresenter<ILoginView> implements ILoginPresenter {
    private IUserModel userModel;
    public LoginPresenter(IUserModel userModel) {
        this.userModel = userModel;
    }

    @Override
    public void login() {
        checkViewAttached();
        getMvpView().showLoading("登录中..."); <<< SEE How to invoke the common infra.
        userModel.login(getMvpView().getUsername(), getMvpView().getPassword(), new Callback() {
            @Override
            public void onSuccess() {
                if (isViewAttached()) { <<<< Common Infra
                    getMvpView().hideLoading();
                    getMvpView().showResult("Success");
                }
            }

            @Override
            public void onFailure(String errorMsg) {
                if (isViewAttached()) {
                    getMvpView().hideLoading();
                    getMvpView().showResult(errorMsg);
                }
            }
        });
    }
}

}}}

Step 3: Define Concreate Views

{{{ e
public interface ILoginView extends MvpView {
    String getUsername();
    String getPassword();
    void showResult(String result);
}

public class LoginActivity extends AppCompatActivity implements ILoginView, View.OnClickListener {

    private EditText username;
    private EditText password;
    private ProgressDialog progressDialog;
    private LoginPresenter presenter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);
        username = (EditText) findViewById(R.id.username);
        password = (EditText) findViewById(R.id.password);
        findViewById(R.id.login).setOnClickListener(this);
        progressDialog = new ProgressDialog(this);
        presenter = new LoginPresenter(new UserModel());
        presenter.attachView(this); <<<< Attch iT. 
    }

    @Override
    protected void onDestroy() {
        presenter.detachView(); >>>> Call the base MVP Infra
        super.onDestroy();
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.login:
                presenter.login(); <<<< Just deligate here.
                break;
        }
    }

    @Override
    public String getUsername() {
        return username.getText().toString().trim();
    }
    @Override
    public String getPassword() {
        return password.getText().toString().trim();
    }
    @Override
    public void showResult(String result) {
        Toast.makeText(LoginActivity.this, result, Toast.LENGTH_SHORT).show();
    }
    
    @Override
    public void showLoading(String msg) {
        progressDialog.setMessage(msg);
        if (!progressDialog.isShowing()) {
            progressDialog.show();
        }
    }

    @Override
    public void hideLoading() {
        if (progressDialog.isShowing()) {
            progressDialog.dismiss();
        }
    }

    @Override
    public void showError(String errorMsg) {
        Toast.makeText(LoginActivity.this, errorMsg, Toast.LENGTH_SHORT).show();
    }
}

}}}

Step 4: An beter way to attch and detach:
{{{e
public interface BasePresenter {
    void onViewAttached(MVPView view); 
    void onViewDetached();
}
// In case of Activity.
public class BaseActivity extends AppCompatActivity { 
  @Override 
  protected void onStart() { 
    super.onStart();
    presenter.onViewAttached(this);
  }
@Override protected void onStop() { 
    super.onStop();
    presenter.onViewDetached();
  } 
}
}}}


Example 4: An alternative design for MVP.
We saw that View Despends on presenter anyway. 
Step1: Have a BaseViewPresenter 
{{{
public abstract class BaseViewPresenter<V> {

  private V mView; 
  
  public final void attachView(V view) {
    if (view == null) {
      return;
    }

    mView = view;
    onViewAttached();
  }
  protected void onViewAttached() {}
  
  public final void detachView() {
    onViewDetached();
    mView = null;
  }

  protected void onViewDetached() {}
    
  public @Nullable V getView() {
    return mView;
  }
}

}}}
Step2: Have a LoginViewPresenter - which says what needs on View Side.
{{{
public class LoginViewPresenter<	
        V extends BaseViewPresenter.ViewContract>	
    extends BaseViewPresenter<V> {	
	
  public interface ViewContract {	
    void onAuthSuccess();	
    void onAuthFailure();	
  }	
	
  public LoginViewPresenter(....) {	
      ....
  }	
	
  public void doLogin(credentials) {	
    LoginUtil.doLogin(credentials,	
        new Callback<Result>() {	
          @Override	
          public void onSuccess(Result result) {	
            UiHandler.post(	
                new Runnable() {	
                  @Override	
                  public void run() {	
                    onAuthSuccess();	
                  }	
                });	
          }	
	
          @Override	
          public void onFailure() {	
            UiHandler.post(	
                new Runnable() {	
                  @Override	
                  public void run() {	
                    onAuthFailure();	
                  }	
                });	
          }	
        });	
  }	
	
  private void onAuthSuccess() {	
    if (getView() == null) {	
      return;	
    }	
    getView().onAuthSuccess();	
  }	

    private void onAuthSuccess() {	
    if (getView() == null) {	
      return;	
    }	
    getView().onAuthSuccess();	
  }
}
}}}
Step3: Define the View which will do all the stuff required by presenter.
{{{
public class LoginView extends BaseView	
    implements LoginViewPresenter.ViewContract {		
	...
  public LoginView(Context context) {	
    this(context, null, 0);	
  }	
	
  public LoginView(Context context, @Nullable AttributeSet attrs) {	
    this(context, attrs, 0);	
  }	
	
  public LoginView(Context context, @Nullable AttributeSet attrs, int defStyle) {	
    super(context, attrs, defStyle);	
    setContentView(R.layout.my_view);	
    mLoginViewPresenter = ....
	....
    mLoginViewPresenter.doLogin(....)
  }	
	
  @Override	
  protected void onAttachedToWindow() {	
    super.onAttachedToWindow();	
    mLoginViewPresenter.attachView(this);		
  }	
	
  @Override	
  protected void onDetachedFromWindow() {	
    mLoginViewPresenter.detachView();	
    super.onDetachedFromWindow();	
  }	
	
	
  @Override	
  public void onAuthSuccess() {	
    // Do ops.
  }	
	
  @Override	
  public void onAuthFailure() {	
    // DO Ops.	
  }	
}
}}}



# Design communication between mutiple compoenens in android:
Table: Communication summary table
Activity/Fragemnets to CustomView #
Custom view  to Activity/Fragemnets #
CustomView to CustomView under same holders #
Activity to Fragemnt #
Fragemnt to Activity #
Fragemnt to Fragemnt #
Activity to Service #
Service to Activity #



## Monitization your app.

# Google AddMob.
Step1: configure graddle
To use addmob just add the below configuraration in the graddle files. Then go to AddMob(https://apps.admob.com/v2/home?pli=1) and create new banner add id . 
Now we are ready to build two type of adds.
1. Banner add
2. Full screen add.
{{{
     implementation 'com.google.android.gms:play-services-ads:15.0.0'
}}}

Step2: To have a banner add , please add this view in your layout and do the initilization as shown in code.
{{{
// add layout
<com.google.android.gms.ads.AdView
    xmlns:ads="http://schemas.android.com/apk/res-auto"
    android:id="@+id/adView"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_centerHorizontal="true"
    android:layout_alignParentBottom="true"
    ads:adSize="BANNER" << You may use BANNER | LARGE_BANNER | FULL_BANNER
    ads:adUnitId="ca-app-pub-3940256099942544/6300978111"> <<< test uit id
</com.google.android.gms.ads.AdView>

//initilize.
public class MainActivity extends AppCompatActivity {
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        MobileAds.initialize(this, "ca-app-pub-3940256099942544~3347511713"); << Test Id 
        #MobileAds.initialize(this, "YOUR_ADMOB_APP_ID");
        mAdView = findViewById(R.id.adView);
        AdRequest adRequest = new AdRequest.Builder().build();
        mAdView.loadAd(adRequest);
        mAdView.setAdListener(new AdListener() {
            ...
            @Override
            public void onAdOpened() {
            }
             @Override
            public void onAdClosed() {
            }
        }
    }
void createProgramitically()
    {
        AdView adView = new AdView(this);
        adView.setAdSize(AdSize.BANNER);
        adView.setAdUnitId("ca-app-pub-3940256099942544/6300978111"); <<< test uit Id.
        // TODO: Add adView to your view hierarchy.
    }
}}}

Step 3:  To have a  interstitial ads , No need  to add anythig in your view, but do the initilization as shown in code. they should call show() method to show the add and then you can make some action when the ad is close.
{{{
import com.google.android.gms.ads.InterstitialAd;
import com.google.android.gms.ads.AdRequest;
public class MainActivity extends Activity {
    private InterstitialAd mInterstitialAd;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        MobileAds.initialize(this,"ca-app-pub-3940256099942544~3347511713"); // test id
        mInterstitialAd = new InterstitialAd(this);
        mInterstitialAd.setAdUnitId("ca-app-pub-3940256099942544/1033173712"); //test id
        mInterstitialAd.loadAd(new AdRequest.Builder().build());

        mMyButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (mInterstitialAd.isLoaded()) {
                    mInterstitialAd.show();
                } else {
                    Log.d("TAG", "The interstitial wasn't loaded yet.");
                }
            }
        });
        mInterstitialAd.setAdListener(new AdListener() {
            @Override
            public void onAdLoaded() {}

            @Override
            public void onAdFailedToLoad(int errorCode) {}

            @Override
            public void onAdOpened() {}

            @Override
            public void onAdLeftApplication() {}

            @Override
            public void onAdClosed() {
                 // Prepare next add
                 mInterstitialAd.loadAd(new AdRequest.Builder().build());
                 MoveToSecondScreen();
            }
        });
    }
}
}}}

# Defining a model 

Step 1: Define your models. Note that your model has no setting - which makes them immutable.
public class User implements Serializable {
  private static final long serialVersionUID = 0;

  @JsonProperty("user_id")
  public final String userId;

  @JsonProperty("display_name")
  public final String displayName;

  public User(UserBuilder builder) {
    this.userId = builder.getUserId();
    this.displayName = builder.getDisplayName();
  }

  /** For JSON deserialization. */
  public User() {
    userId = null;
    displayName = null;
  }

  public String getProfilePicUri() {
    return profilePicUri;
  }

  @Override
  public String toString() {
    return toStringHelper().toString();
  }

  protected MoreObjects.ToStringHelper toStringHelper() {
    return MoreObjects.toStringHelper(User.class)
        .add("userId", userId)
        .add("displayName", displayName)
  }
}

#Step2: Now provides a builder class for your model which can set the values ( in any order in a chain ) and then call build method to get the immutable object.
public class UserBuilder {
  private String mUserId;
  private String mDisplayName;

  public UserBuilder() {}
  public String getUserId() {
    return mUserId;
  }
  public UserBuilder setUserId(String userId) {
    mUserId = userId;
    return this;
  }
  public String getDisplayName() {
    return mDisplayName;
  }
  public UserBuilder setDisplayName(String displayName) {
    mDisplayName = displayName;
    return this;
  }
  public User build() {
    return new User(this);
  }
}


Step3: Here is how you can use to create the objects using the UserBuilder
{{{
  private static User getUser() {	
    UserBuilder builder = new UserBuilder();	
    builder.setUserId("123");	
    builder.setDisplayName("Dipankar");	
    return builder.build();	
  }	
}}}

Step 4: Provides a way to serilize and desrize with json
Sometime, you get data from network as json string and you might constract the java object by manuualy parsing it.You can use jackson lib to have this.
{{{
//First create a mapper :
import com.fasterxml.jackson.databind.ObjectMapper;// in play 2.3
ObjectMapper mapper = new ObjectMapper();
// As Array:
MyClass[] myObjects = mapper.readValue(json, MyClass[].class);
// As List:
List<MyClass> myObjects = mapper.readValue(jsonInput, new TypeReference<List<MyClass>>(){});
// Another way to specify the List type:
List<MyClass> myObjects = mapper.readValue(jsonInput, mapper.getTypeFactory().constructCollectionType(List.class, MyClass.class));
}}}



## Java Libs for android:
# Jackson
{{{
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.5'
compile 'com.fasterxml.jackson.core:jackson-core:2.8.5'
compile 'com.fasterxml.jackson.core:jackson-annotations:2.8.5'

ObjectMapper mapper = new ObjectMapper();

Person person = new Person();
mapper.writeValue(new File("/a/path/to/person.json"), person);  // write to file
String jsonStr = mapper.writeValueAsString(person);            // write to string

Person person1;
//read from an url
person1 = mapper.readValue(new URL("https://api.myjson.com/bins/hoh4j"), Person.class);

//read from a string
String personJsonStr = "{\"firstname\":\"John\",\"lastname\":\"Doe\"}";
person2 = mapper.readValue(personJsonStr, Person.class);

//read from a file
person3 = mapper.readValue(new File("/a/path/to/person.json"), Person.class);

}}}
Sample model class with Jackson annotations for the above json string.
{{{
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
        "firstname",
        "lastname"
})
public class Person {
    @JsonProperty("firstname")
    private String firstname;
    @JsonProperty("lastname")
    private String lastname;
    @JsonIgnore
    private Map<String, Object> additionalProperties = new HashMap<String, Object>();

    @JsonProperty("firstname")
    public String getFirstname() {
        return firstname;
    }

    @JsonProperty("firstname")
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    @JsonProperty("lastname")
    public String getLastname() {
        return lastname;
    }

    @JsonProperty("lastname")
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    @JsonAnySetter
    public void setAdditionalProperty(String name, Object value) {
        this.additionalProperties.put(name, value);
    }
}
}}}

{{{
private void jsonToObjectUrl() {
    final ObjectMapper mapper = new ObjectMapper();
    final Handler handler = new Handler();
    new Thread(new Runnable() {
        @Override
        public void run() {
            try {
                Person person = mapper.readValue(new URL("https://api.myjson.com/bins/hoh4j"), Person.class);                                 // read from url
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        tvDisplay.setText("json string -> object\n" + person.getFirstname() + " " + person.getLastname());
                    }
                });
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }).start();
}
private void objectToJson() {
    ObjectMapper mapper = new ObjectMapper();
    try {
        //mapper.writeValue(new File(getFilesDir(), "person.json"), person);  // write to file
        String jsonStr = mapper.writeValueAsString(person);                   // write to string
        tvDisplay.setText("object -> json string\n" + jsonStr);
    } catch (JsonProcessingException e) {
        e.printStackTrace();
        tvDisplay.setText(e.getMessage());
    } catch (IOException e) {
        e.printStackTrace();
        tvDisplay.setText(e.getMessage());
    }
}
}}}
## Android Pro Dev Trciks.

# Connecting device using wifi
{{{
// Set the target device to listen for a TCP/IP connection on port 5555.
adb tcpip 5555

//Connect the device through usb and get the ip address of the device
adb shell ip -f inet addr show wlan0
adb shell ip route | awk '{print $9}'

//Connect the device, 192.168.1.213 is the ip address obtained from the previous step.
adb connect 192.168.1.213:5555
//Disconnect the device.
adb disconnect 192.168.1.213
//See connected devices.
adb devices
}}}

